const MEMBERS = [
{"signature":"CommonVariables","childcount":23,"type":"Class","name":"CommonVariables","token":"public class CommonVariables ","scope":"","comments":{"summary":"class used to keep track all the static variables needed for the game"}},{"signature":"CommonVariables.UICanvas","childcount":0,"type":"Field","name":"UICanvas","token":"public GameObject UICanvas ","scope":"CommonVariables","comments":{"summary":"the canvas used to display the dialogue"}},{"signature":"CommonVariables.GameCanvas","childcount":0,"type":"Field","name":"GameCanvas","token":"public GameObject GameCanvas ","scope":"CommonVariables","comments":{"summary":"the canvas used to display the in games UI elements"}},{"signature":"CommonVariables.transportation","childcount":0,"type":"Field","name":"transportation","token":"static string transportation ","scope":"CommonVariables","comments":{"summary":"used to update the model in the loading screen"}},{"signature":"CommonVariables.languageToLearn","childcount":0,"type":"Field","name":"languageToLearn","token":"static string languageToLearn ","scope":"CommonVariables","comments":{"summary":"keep track of the language the player is trying to learn"}},{"signature":"CommonVariables.languageKnown","childcount":0,"type":"Field","name":"languageKnown","token":"static string languageKnown ","scope":"CommonVariables","comments":{"summary":"keep track of the language known by the player"}},{"signature":"CommonVariables.translations","childcount":0,"type":"Field","name":"translations","token":"static bool translations ","scope":"CommonVariables","comments":{"summary":"Used to determine if the player require translations"}},{"signature":"CommonVariables.sceneToLoad","childcount":0,"type":"Field","name":"sceneToLoad","token":"static int sceneToLoad ","scope":"CommonVariables","comments":{"summary":"used to keep track the scene that is needed to be load after the loading scene"}},{"signature":"CommonVariables.Name","childcount":0,"type":"Field","name":"Name","token":"static string Name ","scope":"CommonVariables","comments":{"summary":"Keep track of the player name"}},{"signature":"CommonVariables.Gender","childcount":0,"type":"Field","name":"Gender","token":"static string Gender ","scope":"CommonVariables","comments":{"summary":"keep track of the player gender"}},{"signature":"CommonVariables.SetName(string)","childcount":0,"type":"Method","name":"SetName","token":"public void SetName(string name)","scope":"CommonVariables","comments":{"summary":"setter for the name variable"},"params":{"name":"string"}},{"signature":"CommonVariables.SetTranslation(bool)","childcount":0,"type":"Method","name":"SetTranslation","token":"public void SetTranslation(bool state)","scope":"CommonVariables","comments":{"summary":"setter for the translation variable"},"params":{"state":"bool"}},{"signature":"CommonVariables.setSceneToLoad(int)","childcount":0,"type":"Method","name":"setSceneToLoad","token":"public void setSceneToLoad(int scene)","scope":"CommonVariables","comments":{"summary":"setter for the sceneToLoad variable"},"params":{"scene":"int"}},{"signature":"CommonVariables.getSceneToLoad()","childcount":0,"type":"Method","name":"getSceneToLoad","token":"public int getSceneToLoad()","scope":"CommonVariables","comments":{"summary":"getter for sceneToLoad variable"}},{"signature":"CommonVariables.SetLearn(string)","childcount":0,"type":"Method","name":"SetLearn","token":"public void SetLearn(string ltl)","scope":"CommonVariables","comments":{"summary":"setter for the languageToLearn variable"},"params":{"ltl":"string"}},{"signature":"CommonVariables.SetKnown(string)","childcount":0,"type":"Method","name":"SetKnown","token":"public void SetKnown(string lk)","scope":"CommonVariables","comments":{"summary":"setter for the languageKnown variable"},"params":{"lk":"string"}},{"signature":"CommonVariables.SetGender(string)","childcount":0,"type":"Method","name":"SetGender","token":"public void SetGender(string gender)","scope":"CommonVariables","comments":{"summary":"setter for the gender variable"},"params":{"gender":"string"}},{"signature":"CommonVariables.GetLearn()","childcount":0,"type":"Method","name":"GetLearn","token":"public string GetLearn()","scope":"CommonVariables","comments":{"summary":"getter for the languageToLearn variable"}},{"signature":"CommonVariables.GetKnown()","childcount":0,"type":"Method","name":"GetKnown","token":"public string GetKnown()","scope":"CommonVariables","comments":{"summary":"getter for the languageKnown variable"}},{"signature":"CommonVariables.setTransp(string)","childcount":0,"type":"Method","name":"setTransp","token":"public void setTransp(string vehicle)","scope":"CommonVariables","comments":{"summary":"setter for the transportation variable"},"params":{"vehicle":"string"}},{"signature":"CommonVariables.getTransp()","childcount":0,"type":"Method","name":"getTransp","token":"public string getTransp()","scope":"CommonVariables","comments":{"summary":"getter for the transportation variable"}},{"signature":"CommonVariables.getGender()","childcount":0,"type":"Method","name":"getGender","token":"public string getGender()","scope":"CommonVariables","comments":{"summary":"getter for the gender variable"}},{"signature":"CommonVariables.getTranslation()","childcount":0,"type":"Method","name":"getTranslation","token":"public bool getTranslation()","scope":"CommonVariables","comments":{"summary":"getter for the translations variable"}},{"signature":"CommonVariables.getName()","childcount":0,"type":"Method","name":"getName","token":"public string getName()","scope":"CommonVariables","comments":{"summary":"getter for the player name, if the variable is empty assign it to Player"}},{"signature":"ComputerInputs","childcount":3,"type":"Class","name":"ComputerInputs","token":"public class ComputerInputs : MonoBehaviour ","scope":"","comments":{"summary":"Class used to interact with the NPC"}},{"signature":"ComputerInputs.Show()","childcount":0,"type":"Method","name":"Show","token":"public void Show()","scope":"ComputerInputs"},{"signature":"ComputerInputs.Hide()","childcount":0,"type":"Method","name":"Hide","token":"private void Hide()","scope":"ComputerInputs"},{"signature":"ComputerInputs.Update()","childcount":0,"type":"Method","name":"Update","token":"void Update()","scope":"ComputerInputs"},{"signature":"Core","childcount":2,"type":"Namespace","name":"Core","token":"namespace Core","scope":""},{"signature":"Core.Condition","childcount":4,"type":"Class","name":"Condition","token":"[System.Serializable]\npublic class Condition ","scope":"Core"},{"signature":"Core.Condition.and","childcount":0,"type":"Field","name":"and","token":"[SerializeField]\nDisjunction[] and ","scope":"Core.Condition"},{"signature":"Core.Condition.check(IEnumerable<IpredicateEvaluator>)","childcount":0,"type":"Method","name":"check","token":"public bool check(IEnumerable<IpredicateEvaluator> evaluators)","scope":"Core.Condition","params":{"evaluators":"IEnumerable<IpredicateEvaluator>"}},{"signature":"Core.Condition.Disjunction","childcount":2,"type":"Class","name":"Disjunction","token":"[System.Serializable]\nclass Disjunction ","scope":"Core.Condition"},{"signature":"Core.Condition.Disjunction.or","childcount":0,"type":"Field","name":"or","token":"[SerializeField]\nPredicate[] or ","scope":"Core.Condition.Disjunction"},{"signature":"Core.Condition.Disjunction.check(IEnumerable<IpredicateEvaluator>)","childcount":0,"type":"Method","name":"check","token":"public bool check(IEnumerable<IpredicateEvaluator> evaluators)","scope":"Core.Condition.Disjunction","params":{"evaluators":"IEnumerable<IpredicateEvaluator>"}},{"signature":"Core.Condition.Predicate","childcount":4,"type":"Class","name":"Predicate","token":"[System.Serializable]\nclass Predicate ","scope":"Core.Condition"},{"signature":"Core.Condition.Predicate.predicate","childcount":0,"type":"Field","name":"predicate","token":"[SerializeField]\nstring predicate ","scope":"Core.Condition.Predicate"},{"signature":"Core.Condition.Predicate.parameters","childcount":0,"type":"Field","name":"parameters","token":"[SerializeField]\nstring[] parameters ","scope":"Core.Condition.Predicate"},{"signature":"Core.Condition.Predicate.negate","childcount":0,"type":"Field","name":"negate","token":"[SerializeField]\nbool negate ","scope":"Core.Condition.Predicate"},{"signature":"Core.Condition.Predicate.check(IEnumerable<IpredicateEvaluator>)","childcount":0,"type":"Method","name":"check","token":"public bool check(IEnumerable<IpredicateEvaluator> evaluators)","scope":"Core.Condition.Predicate","params":{"evaluators":"IEnumerable<IpredicateEvaluator>"}},{"signature":"Core.IpredicateEvaluator","childcount":1,"type":"Interface","name":"IpredicateEvaluator","token":"public interface IpredicateEvaluator ","scope":"Core"},{"signature":"Core.IpredicateEvaluator.Evaluate(string, string[])","childcount":0,"type":"Method","name":"Evaluate","token":"bool? Evaluate(string predicate, string[] parameters)","scope":"Core.IpredicateEvaluator","params":{"predicate":"string","parameters":"string[]"}},{"signature":"Exit","childcount":1,"type":"Class","name":"Exit","token":"public class Exit : MonoBehaviour ","scope":"","comments":{"summary":"used to exit the game"}},{"signature":"Exit.Update()","childcount":0,"type":"Method","name":"Update","token":"void Update()","scope":"Exit"},{"signature":"MobilePhoneImputs","childcount":2,"type":"Class","name":"MobilePhoneImputs","token":"public class MobilePhoneImputs : MonoBehaviour ","scope":""},{"signature":"MobilePhoneImputs.Update()","childcount":0,"type":"Method","name":"Update","token":"private void Update()","scope":"MobilePhoneImputs"},{"signature":"MobilePhoneImputs.openPhoneKeyboard()","childcount":0,"type":"Method","name":"openPhoneKeyboard","token":"public void openPhoneKeyboard()","scope":"MobilePhoneImputs"},{"signature":"NPCHasStillDialogue","childcount":3,"type":"Class","name":"NPCHasStillDialogue","token":"public class NPCHasStillDialogue : MonoBehaviour ","scope":"","comments":{"summary":"this class is used to detect if the player has still something to say to the player"}},{"signature":"NPCHasStillDialogue.remainingdialogues","childcount":0,"type":"Field","name":"remainingdialogues","token":"int remainingdialogues ","scope":"NPCHasStillDialogue"},{"signature":"NPCHasStillDialogue.EsclamationMark","childcount":0,"type":"Field","name":"EsclamationMark","token":"GameObject EsclamationMark ","scope":"NPCHasStillDialogue"},{"signature":"NPCHasStillDialogue.readDialogue()","childcount":0,"type":"Method","name":"readDialogue","token":"public void readDialogue()","scope":"NPCHasStillDialogue","comments":{"summary":"Function used to remove the esclamation mark when all the possible dialogue with a character is read"}},{"signature":"SetPlayer","childcount":4,"type":"Class","name":"SetPlayer","token":"public class SetPlayer : MonoBehaviour ","scope":"","comments":{"summary":"Class used to display the player avatar model"}},{"signature":"SetPlayer.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"SetPlayer","comments":{"summary":"The script that keep track of the common static strings"}},{"signature":"SetPlayer.Boy","childcount":0,"type":"Field","name":"Boy","token":"[SerializeField]\nGameObject Boy ","scope":"SetPlayer","comments":{"summary":"the boy version of the player"}},{"signature":"SetPlayer.Girl","childcount":0,"type":"Field","name":"Girl","token":"[SerializeField]\nGameObject Girl ","scope":"SetPlayer","comments":{"summary":"the female version of the player"}},{"signature":"SetPlayer.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"SetPlayer"},{"signature":"SetScreenResolution","childcount":1,"type":"Class","name":"SetScreenResolution","token":"public class SetScreenResolution : MonoBehaviour ","scope":"","comments":{"summary":"This class is used to set the resolution of the game as requested to ensure the UI works as expected"}},{"signature":"SetScreenResolution.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"SetScreenResolution"},{"signature":"UKITAchanges","childcount":4,"type":"Class","name":"UKITAchanges","token":"public class UKITAchanges : MonoBehaviour ","scope":"","comments":{"summary":"Class used to modify if needed the gameobjects that should only appear in England/Italy"}},{"signature":"UKITAchanges.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"UKITAchanges","comments":{"summary":"The script that keep track of the common static strings"}},{"signature":"UKITAchanges.UKObjects","childcount":0,"type":"Field","name":"UKObjects","token":"List<GameObject> UKObjects ","scope":"UKITAchanges"},{"signature":"UKITAchanges.ITAObjects","childcount":0,"type":"Field","name":"ITAObjects","token":"List<GameObject> ITAObjects ","scope":"UKITAchanges"},{"signature":"UKITAchanges.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"UKITAchanges"},{"signature":"Wallet","childcount":7,"type":"Class","name":"Wallet","token":"public class Wallet : MonoBehaviour, IpredicateEvaluator ","scope":"","comments":{"summary":"Class used to keep track of the player coins"}},{"signature":"Wallet.wallet","childcount":0,"type":"Field","name":"wallet","token":"public TextMeshProUGUI wallet ","scope":"Wallet","comments":{"summary":"The variable that stores the Ui element for keeping track of the coins"}},{"signature":"Wallet.coinsHeld","childcount":0,"type":"Field","name":"coinsHeld","token":"static int coinsHeld ","scope":"Wallet"},{"signature":"Wallet.Start()","childcount":0,"type":"Method","name":"Start","token":"private void Start()","scope":"Wallet"},{"signature":"Wallet.addCoinsToWallet(int)","childcount":0,"type":"Method","name":"addCoinsToWallet","token":"public void addCoinsToWallet(int coins)","scope":"Wallet","comments":{"summary":"function used to add the reward coins when a quest is completed"},"params":{"coins":"int"}},{"signature":"Wallet.removeCoinsToWallet(int)","childcount":0,"type":"Method","name":"removeCoinsToWallet","token":"public void removeCoinsToWallet(int coins)","scope":"Wallet","comments":{"summary":"function used to remove spent coins from the wallet"},"params":{"coins":"int"}},{"signature":"Wallet.Evaluate(string, string[])","childcount":0,"type":"Method","name":"Evaluate","token":"public bool? Evaluate(string predicate, string[] parameters)","scope":"Wallet","params":{"predicate":"string","parameters":"string[]"}},{"signature":"Wallet.returnCoin()","childcount":0,"type":"Method","name":"returnCoin","token":"public int returnCoin()","scope":"Wallet","comments":{"summary":"getter of the coins"}},{"signature":"Dialogue","childcount":5,"type":"Namespace","name":"Dialogue","token":"namespace Dialogue","scope":"","comments":{"summary":"Namespace used for all the dialogue scripts"}},{"signature":"Dialogue.Dialogue","childcount":16,"type":"Class","name":"Dialogue","token":"public class Dialogue : ScriptableObject, ISerializationCallbackReceiver ","scope":"Dialogue"},{"signature":"Dialogue.Dialogue.nodes","childcount":0,"type":"Field","name":"nodes","token":"List<DialogueNode> nodes ","scope":"Dialogue.Dialogue"},{"signature":"Dialogue.Dialogue.newNodeOffset","childcount":0,"type":"Field","name":"newNodeOffset","token":"Vector2 newNodeOffset ","scope":"Dialogue.Dialogue"},{"signature":"Dialogue.Dialogue.nodeloockup","childcount":0,"type":"Field","name":"nodeloockup","token":"Dictionary<string, DialogueNode> nodeloockup ","scope":"Dialogue.Dialogue"},{"signature":"Dialogue.Dialogue.OnValidate()","childcount":0,"type":"Method","name":"OnValidate","token":"public void OnValidate()","scope":"Dialogue.Dialogue","comments":{"summary":"This function is used to validate the connection between the nodes and their childrens"}},{"signature":"Dialogue.Dialogue.GetAllNodes()","childcount":0,"type":"Method","name":"GetAllNodes","token":"public IEnumerable<DialogueNode> GetAllNodes()","scope":"Dialogue.Dialogue","comments":{"summary":"This function is used to collect all the dialogue nodes"}},{"signature":"Dialogue.Dialogue.GetRootNode()","childcount":0,"type":"Method","name":"GetRootNode","token":"public DialogueNode GetRootNode()","scope":"Dialogue.Dialogue","comments":{"summary":"This function is used to get the main node"}},{"signature":"Dialogue.Dialogue.GetAllChildren(DialogueNode)","childcount":0,"type":"Method","name":"GetAllChildren","token":"public IEnumerable<DialogueNode> GetAllChildren(DialogueNode Parentnode)","scope":"Dialogue.Dialogue","comments":{"summary":"This function is used to collect all the children of a particular node"},"params":{"Parentnode":"DialogueNode"}},{"signature":"Dialogue.Dialogue.GetPlayerChildren(DialogueNode)","childcount":0,"type":"Method","name":"GetPlayerChildren","token":"public IEnumerable<DialogueNode> GetPlayerChildren(DialogueNode currentNode)","scope":"Dialogue.Dialogue","comments":{"summary":"This function is used to get all the nodes linked to the player speech"},"params":{"currentNode":"DialogueNode"}},{"signature":"Dialogue.Dialogue.GetAIChildren(DialogueNode)","childcount":0,"type":"Method","name":"GetAIChildren","token":"public IEnumerable<DialogueNode> GetAIChildren(DialogueNode currentNode)","scope":"Dialogue.Dialogue","comments":{"summary":"this function collect all the nodes of the AI speech"},"params":{"currentNode":"DialogueNode"}},{"signature":"Dialogue.Dialogue.OnBeforeSerialize()","childcount":0,"type":"Method","name":"OnBeforeSerialize","token":"public void OnBeforeSerialize()","scope":"Dialogue.Dialogue"},{"signature":"Dialogue.Dialogue.OnAfterDeserialize()","childcount":0,"type":"Method","name":"OnAfterDeserialize","token":"public void OnAfterDeserialize()","scope":"Dialogue.Dialogue"},{"signature":"Dialogue.Dialogue.CreateNode(DialogueNode)","childcount":0,"type":"Method","name":"CreateNode","token":"public void CreateNode(DialogueNode creatingNode)","scope":"Dialogue.Dialogue","comments":{"summary":"Used to create a new node, this function is divided in two (Make node is part of this logic)"},"params":{"creatingNode":"DialogueNode"}},{"signature":"Dialogue.Dialogue.MakeNode(DialogueNode)","childcount":0,"type":"Method","name":"MakeNode","token":"private DialogueNode MakeNode(DialogueNode creatingNode)","scope":"Dialogue.Dialogue","comments":{"summary":"Used to add all the component in the new node"},"params":{"creatingNode":"DialogueNode"}},{"signature":"Dialogue.Dialogue.AddNode(DialogueNode)","childcount":0,"type":"Method","name":"AddNode","token":"private void AddNode(DialogueNode newNode)","scope":"Dialogue.Dialogue","comments":{"summary":"function used to add a new node"},"params":{"newNode":"DialogueNode"}},{"signature":"Dialogue.Dialogue.DeleteNode(DialogueNode)","childcount":0,"type":"Method","name":"DeleteNode","token":"public void DeleteNode(DialogueNode deletinggNode)","scope":"Dialogue.Dialogue","comments":{"summary":"function used to delete a node"},"params":{"deletinggNode":"DialogueNode"}},{"signature":"Dialogue.Dialogue.CleanDanglingChildren(DialogueNode)","childcount":0,"type":"Method","name":"CleanDanglingChildren","token":"private void CleanDanglingChildren(DialogueNode NodeToDelete)","scope":"Dialogue.Dialogue","comments":{"summary":"function used to clean each nodes from deleted children nodes"},"params":{"NodeToDelete":"DialogueNode"}},{"signature":"Dialogue.DialogueNode","childcount":25,"type":"Class","name":"DialogueNode","token":"public class DialogueNode : ScriptableObject ","scope":"Dialogue"},{"signature":"Dialogue.DialogueNode.PlayerSpeaking","childcount":0,"type":"Field","name":"PlayerSpeaking","token":"bool PlayerSpeaking ","scope":"Dialogue.DialogueNode"},{"signature":"Dialogue.DialogueNode.Question","childcount":0,"type":"Field","name":"Question","token":"bool Question ","scope":"Dialogue.DialogueNode"},{"signature":"Dialogue.DialogueNode.Text","childcount":0,"type":"Field","name":"Text","token":"string Text ","scope":"Dialogue.DialogueNode"},{"signature":"Dialogue.DialogueNode.voicetrack","childcount":0,"type":"Field","name":"voicetrack","token":"string voicetrack ","scope":"Dialogue.DialogueNode"},{"signature":"Dialogue.DialogueNode.children","childcount":0,"type":"Field","name":"children","token":"List<string> children ","scope":"Dialogue.DialogueNode"},{"signature":"Dialogue.DialogueNode.position","childcount":0,"type":"Field","name":"position","token":"Rect position ","scope":"Dialogue.DialogueNode"},{"signature":"Dialogue.DialogueNode.OnEnterAction","childcount":0,"type":"Field","name":"OnEnterAction","token":"string OnEnterAction ","scope":"Dialogue.DialogueNode"},{"signature":"Dialogue.DialogueNode.OnExitAction","childcount":0,"type":"Field","name":"OnExitAction","token":"string OnExitAction ","scope":"Dialogue.DialogueNode"},{"signature":"Dialogue.DialogueNode.condition","childcount":0,"type":"Field","name":"condition","token":"Condition condition ","scope":"Dialogue.DialogueNode"},{"signature":"Dialogue.DialogueNode.GetRect()","childcount":0,"type":"Method","name":"GetRect","token":"public Rect GetRect()","scope":"Dialogue.DialogueNode","comments":{"summary":"getter for the position of the node in the editor"}},{"signature":"Dialogue.DialogueNode.GetText()","childcount":0,"type":"Method","name":"GetText","token":"public string GetText()","scope":"Dialogue.DialogueNode","comments":{"summary":"getter for the dialogue phrase"}},{"signature":"Dialogue.DialogueNode.GetVoiceTrack()","childcount":0,"type":"Method","name":"GetVoiceTrack","token":"public string GetVoiceTrack()","scope":"Dialogue.DialogueNode","comments":{"summary":"getter for the voice track reference"}},{"signature":"Dialogue.DialogueNode.GetChildren()","childcount":0,"type":"Method","name":"GetChildren","token":"public List<string> GetChildren()","scope":"Dialogue.DialogueNode","comments":{"summary":"getter for the nodes linked to this node"}},{"signature":"Dialogue.DialogueNode.isPlayerSpeaking()","childcount":0,"type":"Method","name":"isPlayerSpeaking","token":"public bool isPlayerSpeaking()","scope":"Dialogue.DialogueNode","comments":{"summary":"getter for the variable that determine who is speaking"}},{"signature":"Dialogue.DialogueNode.IsQuestion()","childcount":0,"type":"Method","name":"IsQuestion","token":"public bool IsQuestion()","scope":"Dialogue.DialogueNode","comments":{"summary":"getter for the variable that is determining if the node contain a question"}},{"signature":"Dialogue.DialogueNode.GetOnEnterAction()","childcount":0,"type":"Method","name":"GetOnEnterAction","token":"public string GetOnEnterAction()","scope":"Dialogue.DialogueNode","comments":{"summary":"Getter for the string that contain the required enter action nomenclature"}},{"signature":"Dialogue.DialogueNode.GetOnExitAction()","childcount":0,"type":"Method","name":"GetOnExitAction","token":"public string GetOnExitAction()","scope":"Dialogue.DialogueNode","comments":{"summary":"Getter for the string that contain the required exit action nomenclature"}},{"signature":"Dialogue.DialogueNode.checkCondition(IEnumerable<IpredicateEvaluator>)","childcount":0,"type":"Method","name":"checkCondition","token":"public bool checkCondition(IEnumerable<IpredicateEvaluator> evaluators)","scope":"Dialogue.DialogueNode","comments":{"summary":"Function used to check the condition to enter the node"},"params":{"evaluators":"IEnumerable<IpredicateEvaluator>"}},{"signature":"Dialogue.DialogueNode.SetPosition(Vector2)","childcount":0,"type":"Method","name":"SetPosition","token":"public void SetPosition(Vector2 newPosition)","scope":"Dialogue.DialogueNode","comments":{"summary":"Setter for the node position"},"params":{"newPosition":"Vector2"}},{"signature":"Dialogue.DialogueNode.SetText(string)","childcount":0,"type":"Method","name":"SetText","token":"public void SetText(string newText)","scope":"Dialogue.DialogueNode","comments":{"summary":"Setter for the dialogue text"},"params":{"newText":"string"}},{"signature":"Dialogue.DialogueNode.SetVoiceActing(string)","childcount":0,"type":"Method","name":"SetVoiceActing","token":"public void SetVoiceActing(string newText)","scope":"Dialogue.DialogueNode","comments":{"summary":"setter for the voice acting linkage"},"params":{"newText":"string"}},{"signature":"Dialogue.DialogueNode.AddChild(string)","childcount":0,"type":"Method","name":"AddChild","token":"public void AddChild(string childId)","scope":"Dialogue.DialogueNode","comments":{"summary":"set to add and link a node to the node"},"params":{"childId":"string"}},{"signature":"Dialogue.DialogueNode.RemoveChild(string)","childcount":0,"type":"Method","name":"RemoveChild","token":"public void RemoveChild(string childId)","scope":"Dialogue.DialogueNode","comments":{"summary":"used to remove a linkage between two nodes"},"params":{"childId":"string"}},{"signature":"Dialogue.DialogueNode.SetSpeaker(bool)","childcount":0,"type":"Method","name":"SetSpeaker","token":"public void SetSpeaker(bool newIsPlayerSpeaking)","scope":"Dialogue.DialogueNode","comments":{"summary":"use to change the speaker in the dialogue node between player and AI"},"params":{"newIsPlayerSpeaking":"bool"}},{"signature":"Dialogue.DialogueNode.SetIsQuestion(bool)","childcount":0,"type":"Method","name":"SetIsQuestion","token":"public void SetIsQuestion(bool status)","scope":"Dialogue.DialogueNode","comments":{"summary":"Used to set a node as a question"},"params":{"status":"bool"}},{"signature":"Dialogue.DialogueTrigger","childcount":3,"type":"Class","name":"DialogueTrigger","token":"public class DialogueTrigger : MonoBehaviour ","scope":"Dialogue","comments":{"summary":"Class used to invoke a exit or enter action of a dialogue node"}},{"signature":"Dialogue.DialogueTrigger.action","childcount":0,"type":"Field","name":"action","token":"[SerializeField]\nstring action ","scope":"Dialogue.DialogueTrigger","comments":{"summary":"Variable that need to match the nomenclature of the action in the dialogue node"}},{"signature":"Dialogue.DialogueTrigger.onTrigger","childcount":0,"type":"Field","name":"onTrigger","token":"[SerializeField]\nUnityEvent onTrigger ","scope":"Dialogue.DialogueTrigger","comments":{"summary":"the event that needs to be trigger if called"}},{"signature":"Dialogue.DialogueTrigger.Trigger(string)","childcount":0,"type":"Method","name":"Trigger","token":"public void Trigger(string actionToTrigger)","scope":"Dialogue.DialogueTrigger","comments":{"summary":"Function called when an action is called"},"params":{"actionToTrigger":"string"}},{"signature":"Dialogue.NPCDialogues","childcount":12,"type":"Class","name":"NPCDialogues","token":"public class NPCDialogues : MonoBehaviour ","scope":"Dialogue","comments":{"summary":"class that keep track of the NPC informations"}},{"signature":"Dialogue.NPCDialogues.characterDialouges","childcount":0,"type":"Field","name":"characterDialouges","token":"Dialogue[] characterDialouges ","scope":"Dialogue.NPCDialogues"},{"signature":"Dialogue.NPCDialogues.ItalianDialogue","childcount":0,"type":"Field","name":"ItalianDialogue","token":"[SerializeField]\nDialogue[] ItalianDialogue ","scope":"Dialogue.NPCDialogues","comments":{"summary":"the dialogues with and without subtitles in ita"}},{"signature":"Dialogue.NPCDialogues.EnglishDialogue","childcount":0,"type":"Field","name":"EnglishDialogue","token":"[SerializeField]\nDialogue[] EnglishDialogue ","scope":"Dialogue.NPCDialogues","comments":{"summary":"the dialogues with and without subtitles in english"}},{"signature":"Dialogue.NPCDialogues.converstantname","childcount":0,"type":"Field","name":"converstantname","token":"[SerializeField]\nstring converstantname ","scope":"Dialogue.NPCDialogues","comments":{"summary":"the name of the character"}},{"signature":"Dialogue.NPCDialogues.converstantAvatar","childcount":0,"type":"Field","name":"converstantAvatar","token":"[SerializeField]\nRenderTexture converstantAvatar ","scope":"Dialogue.NPCDialogues","comments":{"summary":"the avatar of the character"}},{"signature":"Dialogue.NPCDialogues.voiceActing","childcount":0,"type":"Field","name":"voiceActing","token":"[SerializeField]\nVoiceActing voiceActing ","scope":"Dialogue.NPCDialogues","comments":{"summary":"the voiceacting script"}},{"signature":"Dialogue.NPCDialogues.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"Dialogue.NPCDialogues","comments":{"summary":"The script that keep track of the common static strings"}},{"signature":"Dialogue.NPCDialogues.Start()","childcount":0,"type":"Method","name":"Start","token":"private void Start()","scope":"Dialogue.NPCDialogues"},{"signature":"Dialogue.NPCDialogues.GetDialogues()","childcount":0,"type":"Method","name":"GetDialogues","token":"public Dialogue[] GetDialogues()","scope":"Dialogue.NPCDialogues","comments":{"summary":"getter for the dialogues"}},{"signature":"Dialogue.NPCDialogues.GetName()","childcount":0,"type":"Method","name":"GetName","token":"public string GetName()","scope":"Dialogue.NPCDialogues","comments":{"summary":"getter for the name variable"}},{"signature":"Dialogue.NPCDialogues.GetAvatar()","childcount":0,"type":"Method","name":"GetAvatar","token":"public RenderTexture GetAvatar()","scope":"Dialogue.NPCDialogues","comments":{"summary":"getter for the avatar texture"}},{"signature":"Dialogue.NPCDialogues.GetVA()","childcount":0,"type":"Method","name":"GetVA","token":"public VoiceActing GetVA()","scope":"Dialogue.NPCDialogues","comments":{"summary":"getter for the voiceacting"}},{"signature":"Dialogue.PlayerConversant","childcount":30,"type":"Class","name":"PlayerConversant","token":"public class PlayerConversant : MonoBehaviour ","scope":"Dialogue","comments":{"summary":"This class is used to keep track of the status of the current dialogue"}},{"signature":"Dialogue.PlayerConversant.playerName","childcount":0,"type":"Field","name":"playerName","token":"[SerializeField]\nstring playerName ","scope":"Dialogue.PlayerConversant","comments":{"summary":"Variable that keep track of the player name"}},{"signature":"Dialogue.PlayerConversant.playerAvatar","childcount":0,"type":"Field","name":"playerAvatar","token":"[SerializeField]\nRenderTexture playerAvatar ","scope":"Dialogue.PlayerConversant","comments":{"summary":"Variable that keep track of the player avatar render texture"}},{"signature":"Dialogue.PlayerConversant.currentDialogue","childcount":0,"type":"Field","name":"currentDialogue","token":"Dialogue currentDialogue ","scope":"Dialogue.PlayerConversant","comments":{"summary":"The current dialogue"}},{"signature":"Dialogue.PlayerConversant.currentNode","childcount":0,"type":"Field","name":"currentNode","token":"DialogueNode currentNode ","scope":"Dialogue.PlayerConversant","comments":{"summary":"the current dialogue node"}},{"signature":"Dialogue.PlayerConversant.currentConverstant","childcount":0,"type":"Field","name":"currentConverstant","token":"NPCDialogues currentConverstant ","scope":"Dialogue.PlayerConversant","comments":{"summary":"Variable that keep track of the AI conversant"}},{"signature":"Dialogue.PlayerConversant.isChoosing","childcount":0,"type":"Field","name":"isChoosing","token":"bool isChoosing ","scope":"Dialogue.PlayerConversant","comments":{"summary":"Variable that is keeping track if the player is choosing an answer for a question"}},{"signature":"Dialogue.PlayerConversant.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"Dialogue.PlayerConversant","comments":{"summary":"Class that keep track of the common static variables"}},{"signature":"Dialogue.PlayerConversant.onConversationUpdated","childcount":0,"type":"Field","name":"onConversationUpdated","token":"public event Action onConversationUpdated ","scope":"Dialogue.PlayerConversant","comments":{"summary":"Used to call a DialogueUI function"}},{"signature":"Dialogue.PlayerConversant.VoiceActingline","childcount":0,"type":"Field","name":"VoiceActingline","token":"string VoiceActingline ","scope":"Dialogue.PlayerConversant","comments":{"summary":"A string that keeps track of the current voiceActing line"}},{"signature":"Dialogue.PlayerConversant.va","childcount":0,"type":"Field","name":"va","token":"VoiceActing va ","scope":"Dialogue.PlayerConversant","comments":{"summary":"the Voiceacting manager script"}},{"signature":"Dialogue.PlayerConversant.StartDialogue(NPCDialogues, Dialogue)","childcount":0,"type":"Method","name":"StartDialogue","token":"public void StartDialogue(NPCDialogues newConversant, Dialogue newDialogue)","scope":"Dialogue.PlayerConversant","comments":{"summary":"This function is used to start the dialogue"},"params":{"newConversant":"NPCDialogues","newDialogue":"Dialogue"}},{"signature":"Dialogue.PlayerConversant.PlayVoice()","childcount":0,"type":"Method","name":"PlayVoice","token":"public void PlayVoice()","scope":"Dialogue.PlayerConversant","comments":{"summary":"Function used to play the voice line linked to the current text"}},{"signature":"Dialogue.PlayerConversant.GetCurrentConversantName()","childcount":0,"type":"Method","name":"GetCurrentConversantName","token":"public string GetCurrentConversantName()","scope":"Dialogue.PlayerConversant","comments":{"summary":"Function used to update the name displayed based on who is talking"}},{"signature":"Dialogue.PlayerConversant.GetCurrentAvatar()","childcount":0,"type":"Method","name":"GetCurrentAvatar","token":"public RenderTexture GetCurrentAvatar()","scope":"Dialogue.PlayerConversant","comments":{"summary":"Function used to update the avatar based on who is talking"}},{"signature":"Dialogue.PlayerConversant.Quit()","childcount":0,"type":"Method","name":"Quit","token":"public void Quit()","scope":"Dialogue.PlayerConversant","comments":{"summary":"Function used to exit the dialogue and close the UI"}},{"signature":"Dialogue.PlayerConversant.isActive()","childcount":0,"type":"Method","name":"isActive","token":"public bool isActive()","scope":"Dialogue.PlayerConversant","comments":{"summary":"Used to make sure that a dialogue is stored in the dialogue variable"}},{"signature":"Dialogue.PlayerConversant.IsChoosing()","childcount":0,"type":"Method","name":"IsChoosing","token":"public bool IsChoosing()","scope":"Dialogue.PlayerConversant","comments":{"summary":"getter for the isChoosing variable"}},{"signature":"Dialogue.PlayerConversant.GetText()","childcount":0,"type":"Method","name":"GetText","token":"public string GetText()","scope":"Dialogue.PlayerConversant","comments":{"summary":"used to get the dialogue text"}},{"signature":"Dialogue.PlayerConversant.GetIsQuestion()","childcount":0,"type":"Method","name":"GetIsQuestion","token":"public bool GetIsQuestion()","scope":"Dialogue.PlayerConversant","comments":{"summary":"getter for the isQuestion variable"}},{"signature":"Dialogue.PlayerConversant.GetVoiceActingline()","childcount":0,"type":"Method","name":"GetVoiceActingline","token":"public string GetVoiceActingline()","scope":"Dialogue.PlayerConversant","comments":{"summary":"Getter for the variable that store the name of the voiceline track"}},{"signature":"Dialogue.PlayerConversant.SelectChoice(DialogueNode)","childcount":0,"type":"Method","name":"SelectChoice","token":"public void SelectChoice(DialogueNode chosenNode)","scope":"Dialogue.PlayerConversant","comments":{"summary":"used to select the node that the player choose during a question"},"params":{"chosenNode":"DialogueNode"}},{"signature":"Dialogue.PlayerConversant.Next()","childcount":0,"type":"Method","name":"Next","token":"public void Next()","scope":"Dialogue.PlayerConversant","comments":{"summary":"used to move to the next dialogue node"}},{"signature":"Dialogue.PlayerConversant.GetChoices()","childcount":0,"type":"Method","name":"GetChoices","token":"public IEnumerable<DialogueNode> GetChoices()","scope":"Dialogue.PlayerConversant","comments":{"summary":"used to get all the possible choice when there is a question"}},{"signature":"Dialogue.PlayerConversant.hasNext()","childcount":0,"type":"Method","name":"hasNext","token":"public bool hasNext()","scope":"Dialogue.PlayerConversant","comments":{"summary":"check if there is a child node connected to the current node"}},{"signature":"Dialogue.PlayerConversant.filterOnCondition(IEnumerable<DialogueNode>)","childcount":0,"type":"Method","name":"filterOnCondition","token":"private IEnumerable<DialogueNode> filterOnCondition(IEnumerable<DialogueNode> inputNode)","scope":"Dialogue.PlayerConversant","comments":{"summary":"check if the conditions are meet"},"params":{"inputNode":"IEnumerable<DialogueNode>"}},{"signature":"Dialogue.PlayerConversant.getEvaluators()","childcount":0,"type":"Method","name":"getEvaluators","token":"private IEnumerable<IpredicateEvaluator> getEvaluators()","scope":"Dialogue.PlayerConversant"},{"signature":"Dialogue.PlayerConversant.TriggerEnterAction()","childcount":0,"type":"Method","name":"TriggerEnterAction","token":"private void TriggerEnterAction()","scope":"Dialogue.PlayerConversant","comments":{"summary":"called when entering a node"}},{"signature":"Dialogue.PlayerConversant.TriggerExitAction()","childcount":0,"type":"Method","name":"TriggerExitAction","token":"private void TriggerExitAction()","scope":"Dialogue.PlayerConversant","comments":{"summary":"called when exiting a node"}},{"signature":"Dialogue.PlayerConversant.TriggerQuitExitAction()","childcount":0,"type":"Method","name":"TriggerQuitExitAction","token":"private void TriggerQuitExitAction()","scope":"Dialogue.PlayerConversant","comments":{"summary":"called when closing a dialogue"}},{"signature":"Dialogue.PlayerConversant.TriggerAction(string)","childcount":0,"type":"Method","name":"TriggerAction","token":"private void TriggerAction(string action)","scope":"Dialogue.PlayerConversant","comments":{"summary":"used to call a specific behaviour when needed"},"params":{"action":"string"}},{"signature":"UI","childcount":1,"type":"Namespace","name":"UI","token":"namespace UI","scope":"","comments":{"summary":"namespace used to include all the Dialogue Ui scripts"}},{"signature":"UI.DialogueUI","childcount":18,"type":"Class","name":"DialogueUI","token":"public class DialogueUI : MonoBehaviour ","scope":"UI","comments":{"summary":"This class is used to keep track of the dialogue text visible in the UI"}},{"signature":"UI.DialogueUI.playerConversant","childcount":0,"type":"Field","name":"playerConversant","token":"PlayerConversant playerConversant ","scope":"UI.DialogueUI","comments":{"summary":"stores the link to the player conversant script"}},{"signature":"UI.DialogueUI.AIText","childcount":0,"type":"Field","name":"AIText","token":"TextMeshProUGUI AIText ","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.TranslationText","childcount":0,"type":"Field","name":"TranslationText","token":"TextMeshProUGUI TranslationText ","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.UserAnswer","childcount":0,"type":"Field","name":"UserAnswer","token":"TMP_InputField UserAnswer ","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.SuggestionText","childcount":0,"type":"Field","name":"SuggestionText","token":"TextMeshProUGUI SuggestionText ","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.ButtonText","childcount":0,"type":"Field","name":"ButtonText","token":"[SerializeField]\nTextMeshProUGUI ButtonText ","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.MainButton","childcount":0,"type":"Field","name":"MainButton","token":"Button MainButton ","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.SpriteMaster","childcount":0,"type":"Field","name":"SpriteMaster","token":"[SerializeField]\nGameObject SpriteMaster ","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.QuitButton","childcount":0,"type":"Field","name":"QuitButton","token":"Button QuitButton ","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.ConversantName","childcount":0,"type":"Field","name":"ConversantName","token":"TextMeshProUGUI ConversantName ","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.ConversantAvatar","childcount":0,"type":"Field","name":"ConversantAvatar","token":"[SerializeField]\nRawImage ConversantAvatar ","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"UI.DialogueUI","comments":{"summary":"The script that keep track of the common static strings"}},{"signature":"UI.DialogueUI.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.CheckQuestionAndUpdate(bool)","childcount":0,"type":"Method","name":"CheckQuestionAndUpdate","token":"private void CheckQuestionAndUpdate(bool StartUp)","scope":"UI.DialogueUI","comments":{"summary":"check if the current node is a question or not and change the visual UI to suit the needs"},"params":{"StartUp":"bool"}},{"signature":"UI.DialogueUI.Next()","childcount":0,"type":"Method","name":"Next","token":"public void Next()","scope":"UI.DialogueUI","comments":{"summary":"used to move to the next dialogue node"}},{"signature":"UI.DialogueUI.UpdateUI()","childcount":0,"type":"Method","name":"UpdateUI","token":"void UpdateUI()","scope":"UI.DialogueUI"},{"signature":"UI.DialogueUI.TypeSentence(string)","childcount":0,"type":"Method","name":"TypeSentence","token":"IEnumerator TypeSentence(string sentence)","scope":"UI.DialogueUI","comments":{"summary":"use to animate the sentence as if it was written"},"params":{"sentence":"string"}},{"signature":"UI.DialogueUI.ChangeSuggestion(int)","childcount":0,"type":"Method","name":"ChangeSuggestion","token":"public void ChangeSuggestion(int suggestionnumber)","scope":"UI.DialogueUI","comments":{"summary":"change the suggestion text based on the number of imput needed"},"params":{"suggestionnumber":"int"}},{"signature":"VoiceActing","childcount":8,"type":"Class","name":"VoiceActing","token":"public class VoiceActing : MonoBehaviour ","scope":"","comments":{"summary":"Used to take track of the voice acting for the characters"}},{"signature":"VoiceActing.VoiceLines","childcount":0,"type":"Field","name":"VoiceLines","token":"AudioSource VoiceLines ","scope":"VoiceActing"},{"signature":"VoiceActing.path","childcount":0,"type":"Field","name":"path","token":"string path ","scope":"VoiceActing"},{"signature":"VoiceActing.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"VoiceActing","comments":{"summary":"The script that keep track of the common static strings"}},{"signature":"VoiceActing.voice","childcount":0,"type":"Field","name":"voice","token":"AudioClip voice ","scope":"VoiceActing","comments":{"summary":"the file that the audio source need to play"}},{"signature":"VoiceActing.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"VoiceActing"},{"signature":"VoiceActing.PlayVoiceLine(string)","childcount":0,"type":"Method","name":"PlayVoiceLine","token":"public void PlayVoiceLine(string audio)","scope":"VoiceActing","comments":{"summary":"This function load the voice acting track from resources and play it"},"params":{"audio":"string"}},{"signature":"VoiceActing.PlayVoiceLinebutton()","childcount":0,"type":"Method","name":"PlayVoiceLinebutton","token":"public void PlayVoiceLinebutton()","scope":"VoiceActing","comments":{"summary":"used to play the voice line when the button is pressed"}},{"signature":"VoiceActing.StopPreviousVoice()","childcount":0,"type":"Method","name":"StopPreviousVoice","token":"public void StopPreviousVoice()","scope":"VoiceActing","comments":{"summary":"prevent the character to play two audio files at the same time"}},{"signature":"Dialogue.Editor","childcount":2,"type":"Namespace","name":"Dialogue.Editor","token":"namespace Dialogue.Editor","scope":"","comments":{"summary":"namespace used for the dialogue editors classes"}},{"signature":"Dialogue.Editor.DialogueEditor","childcount":23,"type":"Class","name":"DialogueEditor","token":"public class DialogueEditor : EditorWindow ","scope":"Dialogue.Editor","comments":{"summary":"the dialogue editor class, used to create the window and visualize the nodes"}},{"signature":"Dialogue.Editor.DialogueEditor.selectedDialogue","childcount":0,"type":"Field","name":"selectedDialogue","token":"Dialogue selectedDialogue ","scope":"Dialogue.Editor.DialogueEditor","comments":{"summary":"keep track of the selected dialogue in the unity editor"}},{"signature":"Dialogue.Editor.DialogueEditor.scrollPosition","childcount":0,"type":"Field","name":"scrollPosition","token":"Vector2 scrollPosition ","scope":"Dialogue.Editor.DialogueEditor","comments":{"summary":"the current position in the window"}},{"signature":"Dialogue.Editor.DialogueEditor.nodeStyle","childcount":0,"type":"Field","name":"nodeStyle","token":"GUIStyle nodeStyle ","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.PlayerStyle","childcount":0,"type":"Field","name":"PlayerStyle","token":"GUIStyle PlayerStyle ","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.draggingNode","childcount":0,"type":"Field","name":"draggingNode","token":"DialogueNode draggingNode ","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.draggingOffset","childcount":0,"type":"Field","name":"draggingOffset","token":"[NonSerialized]\nVector2 draggingOffset ","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.creatingNode","childcount":0,"type":"Field","name":"creatingNode","token":"[NonSerialized]\nDialogueNode creatingNode ","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.DelitingNode","childcount":0,"type":"Field","name":"DelitingNode","token":"[NonSerialized]\nDialogueNode DelitingNode ","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.LinkingParentNode","childcount":0,"type":"Field","name":"LinkingParentNode","token":"[NonSerialized]\nDialogueNode LinkingParentNode ","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.draggingCanvas","childcount":0,"type":"Field","name":"draggingCanvas","token":"[NonSerialized]\nbool draggingCanvas ","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.draggingCanvansOffset","childcount":0,"type":"Field","name":"draggingCanvansOffset","token":"[NonSerialized]\nVector2 draggingCanvansOffset ","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.canvasSize","childcount":0,"type":"Field","name":"canvasSize","token":"const float canvasSize = 4000;","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.backgroundSize","childcount":0,"type":"Field","name":"backgroundSize","token":"const float backgroundSize = 70;","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.ShowEditorWindow()","childcount":0,"type":"Method","name":"ShowEditorWindow","token":"public static void ShowEditorWindow()","scope":"Dialogue.Editor.DialogueEditor"},{"signature":"Dialogue.Editor.DialogueEditor.OnOpenAsset(int, int)","childcount":0,"type":"Method","name":"OnOpenAsset","token":"public static bool OnOpenAsset(int instanceID, int line)","scope":"Dialogue.Editor.DialogueEditor","params":{"instanceID":"int","line":"int"}},{"signature":"Dialogue.Editor.DialogueEditor.OnEnable()","childcount":0,"type":"Method","name":"OnEnable","token":"private void OnEnable()","scope":"Dialogue.Editor.DialogueEditor","comments":{"summary":"function used to change the node style and update them when the editor is enabled"}},{"signature":"Dialogue.Editor.DialogueEditor.OneSelectionChanged()","childcount":0,"type":"Method","name":"OneSelectionChanged","token":"private void OneSelectionChanged()","scope":"Dialogue.Editor.DialogueEditor","comments":{"summary":"used to updat the view for any change"}},{"signature":"Dialogue.Editor.DialogueEditor.OnGUI()","childcount":0,"type":"Method","name":"OnGUI","token":"private void OnGUI()","scope":"Dialogue.Editor.DialogueEditor","comments":{"summary":"function used to display in the window the informations needed"}},{"signature":"Dialogue.Editor.DialogueEditor.processEvents()","childcount":0,"type":"Method","name":"processEvents","token":"private void processEvents()","scope":"Dialogue.Editor.DialogueEditor","comments":{"summary":"function used to drag nodes around or to change the position in the canvas"}},{"signature":"Dialogue.Editor.DialogueEditor.GetNodeAtPoint(Vector2)","childcount":0,"type":"Method","name":"GetNodeAtPoint","token":"private DialogueNode GetNodeAtPoint(Vector2 mousePosition)","scope":"Dialogue.Editor.DialogueEditor","comments":{"summary":"function used to update the node position to the mouse position"},"params":{"mousePosition":"Vector2"}},{"signature":"Dialogue.Editor.DialogueEditor.DrawNode(DialogueNode)","childcount":0,"type":"Method","name":"DrawNode","token":"private void DrawNode(DialogueNode item)","scope":"Dialogue.Editor.DialogueEditor","comments":{"summary":"function used to add or draw the nodes"},"params":{"item":"DialogueNode"}},{"signature":"Dialogue.Editor.DialogueEditor.LinkingNodes(DialogueNode)","childcount":0,"type":"Method","name":"LinkingNodes","token":"private void LinkingNodes(DialogueNode item)","scope":"Dialogue.Editor.DialogueEditor","comments":{"summary":"function used to link and unlink the nodes"},"params":{"item":"DialogueNode"}},{"signature":"Dialogue.Editor.DialogueEditor.DrawConnections(DialogueNode)","childcount":0,"type":"Method","name":"DrawConnections","token":"private void DrawConnections(DialogueNode item)","scope":"Dialogue.Editor.DialogueEditor","comments":{"summary":"function used to draw a line between the two linked nodes"},"params":{"item":"DialogueNode"}},{"signature":"Dialogue.Editor.OnWillMoveAsset(string, string)","childcount":0,"type":"Method","name":"OnWillMoveAsset","token":"private static AssetMoveResult OnWillMoveAsset(string sourcePath, string destinationPath)","scope":"Dialogue.Editor","params":{"sourcePath":"string","destinationPath":"string"}},{"signature":"HotelManager","childcount":13,"type":"Class","name":"HotelManager","token":"public class HotelManager : MonoBehaviour ","scope":"","comments":{"summary":"this script is used as a manager for the Hotel scene"}},{"signature":"HotelManager.Buttons","childcount":0,"type":"Field","name":"Buttons","token":"List<GameObject> Buttons ","scope":"HotelManager"},{"signature":"HotelManager.SnowGlobes","childcount":0,"type":"Field","name":"SnowGlobes","token":"List<GameObject> SnowGlobes ","scope":"HotelManager"},{"signature":"HotelManager.GlobesSuvenirs","childcount":0,"type":"Field","name":"GlobesSuvenirs","token":"List<GameObject> GlobesSuvenirs ","scope":"HotelManager"},{"signature":"HotelManager.globeTex","childcount":0,"type":"Field","name":"globeTex","token":"List<Texture> globeTex ","scope":"HotelManager"},{"signature":"HotelManager.Panels","childcount":0,"type":"Field","name":"Panels","token":"List<GameObject> Panels ","scope":"HotelManager"},{"signature":"HotelManager.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"HotelManager","comments":{"summary":"The script that keep track of the common static strings"}},{"signature":"HotelManager.Update()","childcount":0,"type":"Method","name":"Update","token":"void Update()","scope":"HotelManager"},{"signature":"HotelManager.GotoTuristicScene()","childcount":0,"type":"Method","name":"GotoTuristicScene","token":"public void GotoTuristicScene()","scope":"HotelManager","comments":{"summary":"Used to load the turisting spot, colosseum in Italy and Stonehenge in UK"}},{"signature":"HotelManager.ShowGlobes()","childcount":0,"type":"Method","name":"ShowGlobes","token":"public void ShowGlobes()","scope":"HotelManager","comments":{"summary":"used to load the snowglobes"}},{"signature":"HotelManager.ShowPanels(int)","childcount":0,"type":"Method","name":"ShowPanels","token":"public void ShowPanels(int panel)","scope":"HotelManager","comments":{"summary":"use to load the correct panel to display the right informations"},"params":{"panel":"int"}},{"signature":"HotelManager.ShowButtons()","childcount":0,"type":"Method","name":"ShowButtons","token":"public void ShowButtons()","scope":"HotelManager","comments":{"summary":"used to load the buttons with the location the player can visit"}},{"signature":"HotelManager.GoToArea(int)","childcount":0,"type":"Method","name":"GoToArea","token":"public void GoToArea(int areaNumber)","scope":"HotelManager","comments":{"summary":"used to travel to a specific scene"},"params":{"areaNumber":"int"}},{"signature":"HotelManager.showSnowGlobe(GameObject)","childcount":0,"type":"Method","name":"showSnowGlobe","token":"public void showSnowGlobe(GameObject ButtonPressed)","scope":"HotelManager","comments":{"summary":"used to show the render texture of the snowglobe linked to the image"},"params":{"ButtonPressed":"GameObject"}},{"signature":"CarWheel","childcount":3,"type":"Class","name":"CarWheel","token":"public class CarWheel : MonoBehaviour ","scope":"","comments":{"summary":"function used to animate the car wheels in the loading screen"}},{"signature":"CarWheel.carWheels","childcount":0,"type":"Field","name":"carWheels","token":"List<GameObject> carWheels ","scope":"CarWheel"},{"signature":"CarWheel.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"CarWheel"},{"signature":"CarWheel.Update()","childcount":0,"type":"Method","name":"Update","token":"void Update()","scope":"CarWheel"},{"signature":"LoadingScreenManager","childcount":4,"type":"Class","name":"LoadingScreenManager","token":"public class LoadingScreenManager : MonoBehaviour ","scope":""},{"signature":"LoadingScreenManager.vehicles","childcount":0,"type":"Field","name":"vehicles","token":"GameObject[] vehicles ","scope":"LoadingScreenManager"},{"signature":"LoadingScreenManager.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"LoadingScreenManager","comments":{"summary":"The script that keep track of the common static strings"}},{"signature":"LoadingScreenManager.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"LoadingScreenManager"},{"signature":"LoadingScreenManager.LoadNextScene()","childcount":0,"type":"Method","name":"LoadNextScene","token":"IEnumerator LoadNextScene()","scope":"LoadingScreenManager","comments":{"summary":"Function that load the next scene, it is a courutine as the loading was too quick to show the animation of the vehicle"}},{"signature":"DayAndNight","childcount":1,"type":"Class","name":"DayAndNight","token":"public class DayAndNight ","scope":"","comments":{"summary":"class used to keep track of the device clock time"}},{"signature":"DayAndNight.GetDateandTime(Vector2)","childcount":0,"type":"Method","name":"GetDateandTime","token":"public Vector2 GetDateandTime(Vector2 checktime)","scope":"DayAndNight","comments":{"summary":"function used to return the device time"},"params":{"checktime":"Vector2"}},{"signature":"DecideGender","childcount":3,"type":"Class","name":"DecideGender","token":"public class DecideGender : MonoBehaviour ","scope":"","comments":{"summary":"class used to define the player gender"}},{"signature":"DecideGender.CV","childcount":0,"type":"Field","name":"CV","token":"CommonVariables CV ","scope":"DecideGender","comments":{"summary":"The script that keep track of the common static strings"}},{"signature":"DecideGender.SetGender(string)","childcount":0,"type":"Method","name":"SetGender","token":"public void SetGender(string gender)","scope":"DecideGender","comments":{"summary":"setter for the gender variable"},"params":{"gender":"string"}},{"signature":"DecideGender.LoadNextScene()","childcount":0,"type":"Method","name":"LoadNextScene","token":"public void LoadNextScene()","scope":"DecideGender","comments":{"summary":"used to load the next scene"}},{"signature":"MenuGetTime","childcount":2,"type":"Class","name":"MenuGetTime","token":"public class MenuGetTime : MonoBehaviour ","scope":"","comments":{"summary":"class used to change the lighting in the menu in regards of the hour"}},{"signature":"MenuGetTime.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"MenuGetTime"},{"signature":"MenuGetTime.Update()","childcount":0,"type":"Method","name":"Update","token":"void Update()","scope":"MenuGetTime"},{"signature":"MenuManager","childcount":12,"type":"Class","name":"MenuManager","token":"public class MenuManager : MonoBehaviour ","scope":"","comments":{"summary":"the main menu manager class"}},{"signature":"MenuManager.PlaySettings","childcount":0,"type":"Field","name":"PlaySettings","token":"private List<GameObject> PlaySettings ","scope":"MenuManager","comments":{"summary":"list of the main items showed in the menu-play and settings"}},{"signature":"MenuManager.SelectLanguage","childcount":0,"type":"Field","name":"SelectLanguage","token":"public List<GameObject> SelectLanguage ","scope":"MenuManager","comments":{"summary":"list of the menu items related to the language they know and looking to learn"}},{"signature":"MenuManager.Confirm","childcount":0,"type":"Field","name":"Confirm","token":"public List<GameObject> Confirm ","scope":"MenuManager","comments":{"summary":"list of confirmation buttons"}},{"signature":"MenuManager.Name","childcount":0,"type":"Field","name":"Name","token":"public TMP_InputField Name ","scope":"MenuManager","comments":{"summary":"variable that stores the name of the player"}},{"signature":"MenuManager.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"MenuManager","comments":{"summary":"The script that keep track of the common static strings"}},{"signature":"MenuManager.MainButtons(GameObject)","childcount":0,"type":"Method","name":"MainButtons","token":"public void MainButtons(GameObject tag)","scope":"MenuManager","comments":{"summary":"function used to determine the action to take when the button is pressed"},"params":{"tag":"GameObject"}},{"signature":"MenuManager.DeactivateStartandSettings(GameObject)","childcount":0,"type":"Method","name":"DeactivateStartandSettings","token":"void DeactivateStartandSettings(GameObject tag)","scope":"MenuManager","comments":{"summary":"function used to deactivate the menu part needed"},"params":{"tag":"GameObject"}},{"signature":"MenuManager.DestroymenuItems()","childcount":0,"type":"Method","name":"DestroymenuItems","token":"List<string> DestroymenuItems()","scope":"MenuManager","comments":{"summary":"used to destroy the menu items needed"}},{"signature":"MenuManager.BackToMainMenu(GameObject, GameObject)","childcount":0,"type":"Method","name":"BackToMainMenu","token":"void BackToMainMenu(GameObject maincanvas, GameObject pressed)","scope":"MenuManager","comments":{"summary":"used to go back to the main menu"},"params":{"maincanvas":"GameObject","pressed":"GameObject"}},{"signature":"MenuManager.PlayPressed(GameObject, GameObject)","childcount":0,"type":"Method","name":"PlayPressed","token":"void PlayPressed(GameObject maincanvas, GameObject tag)","scope":"MenuManager","comments":{"summary":"function called when the play button is pressed"},"params":{"maincanvas":"GameObject","tag":"GameObject"}},{"signature":"MenuManager.NextPressed(GameObject)","childcount":0,"type":"Method","name":"NextPressed","token":"void NextPressed(GameObject maincanvas)","scope":"MenuManager","comments":{"summary":"function called when the next button is pressed"},"params":{"maincanvas":"GameObject"}},{"signature":"MenuManager.ConfirmationPart()","childcount":0,"type":"Method","name":"ConfirmationPart","token":"private void ConfirmationPart()","scope":"MenuManager","comments":{"summary":"called to show the last part of the menu, where the player need to confirm that the info are correct"}},{"signature":"Brain","childcount":11,"type":"Class","name":"Brain","token":"public class Brain : MonoBehaviour ","scope":"","comments":{"summary":"This class is used to call and interact with the ANN"}},{"signature":"Brain.ann","childcount":0,"type":"Field","name":"ann","token":"ANN ann ","scope":"Brain","comments":{"summary":"a reference to the ann"}},{"signature":"Brain.saveloads","childcount":0,"type":"Field","name":"saveloads","token":"SaveandLoadWeights saveloads ","scope":"Brain"},{"signature":"Brain.training","childcount":0,"type":"Field","name":"training","token":"TraintheANN training ","scope":"Brain"},{"signature":"Brain.inputsData","childcount":0,"type":"Field","name":"inputsData","token":"List<double>[] inputsData ","scope":"Brain","comments":{"summary":"the input required"}},{"signature":"Brain.outputsData","childcount":0,"type":"Field","name":"outputsData","token":"List<double>[] outputsData ","scope":"Brain","comments":{"summary":"the output expected"}},{"signature":"Brain.StartTheBrain(string)","childcount":0,"type":"Method","name":"StartTheBrain","token":"public void StartTheBrain(string path)","scope":"Brain","comments":{"summary":"used to start the brain when the dialogue reach a question"},"params":{"path":"string"}},{"signature":"Brain.Update()","childcount":0,"type":"Method","name":"Update","token":"private void Update()","scope":"Brain"},{"signature":"Brain.Run(List<double>, List<double>, bool)","childcount":0,"type":"Method","name":"Run","token":"List<double> Run(List<double> inputs, List<double> outputs, bool train)","scope":"Brain","comments":{"summary":"run the ann to collect the outputs"},"params":{"inputs":"List<double>","outputs":"List<double>","train":"bool"}},{"signature":"Brain.Run(List<double>, bool)","childcount":0,"type":"Method","name":"Run","token":"public List<double> Run(List<double> inputs, bool train)","scope":"Brain","params":{"inputs":"List<double>","train":"bool"}},{"signature":"Brain.GetTheData()","childcount":0,"type":"Method","name":"GetTheData","token":"void GetTheData()","scope":"Brain"},{"signature":"Brain.UseTheDataToTrain()","childcount":0,"type":"Method","name":"UseTheDataToTrain","token":"void UseTheDataToTrain()","scope":"Brain"},{"signature":"QuestionsAndAnswers","childcount":18,"type":"Class","name":"QuestionsAndAnswers","token":"public class QuestionsAndAnswers : MonoBehaviour ","scope":""},{"signature":"QuestionsAndAnswers.brain","childcount":0,"type":"Field","name":"brain","token":"GameObject brain ","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.Question","childcount":0,"type":"Field","name":"Question","token":"string Question ","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.Answers","childcount":0,"type":"Field","name":"Answers","token":"List<string> Answers ","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.bitLenght","childcount":0,"type":"Field","name":"bitLenght","token":"int bitLenght ","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.SuggestionButton","childcount":0,"type":"Field","name":"SuggestionButton","token":"[SerializeField]\nButton SuggestionButton ","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.bit","childcount":0,"type":"Field","name":"bit","token":"List<string[]> bit ","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.StartConverstation(bool, bool, List<string>)","childcount":0,"type":"Method","name":"StartConverstation","token":"public void StartConverstation(bool logic, bool StartUp, List<string> ans)","scope":"QuestionsAndAnswers","params":{"logic":"bool","StartUp":"bool","ans":"List<string>"}},{"signature":"QuestionsAndAnswers.ConversationSetUP(bool, bool, List<string>)","childcount":0,"type":"Method","name":"ConversationSetUP","token":"private void ConversationSetUP(bool logic, bool StartUp, List<string> ans)","scope":"QuestionsAndAnswers","params":{"logic":"bool","StartUp":"bool","ans":"List<string>"}},{"signature":"QuestionsAndAnswers.GetCV()","childcount":0,"type":"Method","name":"GetCV","token":"public CommonVariables GetCV()","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.StartBrain()","childcount":0,"type":"Method","name":"StartBrain","token":"void StartBrain()","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.CreateSuggestionButtons()","childcount":0,"type":"Method","name":"CreateSuggestionButtons","token":"private void CreateSuggestionButtons()","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.GetSuggest(List<string[]>)","childcount":0,"type":"Method","name":"GetSuggest","token":"private List<string> GetSuggest(List<string[]> allsuggest)","scope":"QuestionsAndAnswers","params":{"allsuggest":"List<string[]>"}},{"signature":"QuestionsAndAnswers.GetInput()","childcount":0,"type":"Method","name":"GetInput","token":"List<string[]> GetInput()","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.AnswerCheck(string)","childcount":0,"type":"Method","name":"AnswerCheck","token":"List<double> AnswerCheck(string Submitted)","scope":"QuestionsAndAnswers","params":{"Submitted":"string"}},{"signature":"QuestionsAndAnswers.CheckCorrectAnswer()","childcount":0,"type":"Method","name":"CheckCorrectAnswer","token":"public void CheckCorrectAnswer()","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.UpdateUI()","childcount":0,"type":"Method","name":"UpdateUI","token":"public void UpdateUI()","scope":"QuestionsAndAnswers"},{"signature":"QuestionsAndAnswers.UpdateUI(List<double>)","childcount":0,"type":"Method","name":"UpdateUI","token":"void UpdateUI(List<double> output)","scope":"QuestionsAndAnswers","params":{"output":"List<double>"}},{"signature":"SaveandLoadWeights","childcount":2,"type":"Class","name":"SaveandLoadWeights","token":"public class SaveandLoadWeights ","scope":""},{"signature":"SaveandLoadWeights.SaveWeights(string, int, int, string)","childcount":0,"type":"Method","name":"SaveWeights","token":"public void SaveWeights(string usage, int inputs, int outputs, string content)","scope":"SaveandLoadWeights","params":{"usage":"string","inputs":"int","outputs":"int","content":"string"}},{"signature":"SaveandLoadWeights.LoadData(string, int, int)","childcount":0,"type":"Method","name":"LoadData","token":"public string LoadData(string usage, int inputs, int outputs)","scope":"SaveandLoadWeights","params":{"usage":"string","inputs":"int","outputs":"int"}},{"signature":"TraintheANN","childcount":16,"type":"Class","name":"TraintheANN","token":"public class TraintheANN : MonoBehaviour ","scope":""},{"signature":"TraintheANN.train","childcount":0,"type":"Field","name":"train","token":"public bool train ","scope":"TraintheANN"},{"signature":"TraintheANN.numberofImput","childcount":0,"type":"Field","name":"numberofImput","token":"public int numberofImput ","scope":"TraintheANN"},{"signature":"TraintheANN.numberofOutput","childcount":0,"type":"Field","name":"numberofOutput","token":"public int numberofOutput ","scope":"TraintheANN"},{"signature":"TraintheANN.numberofHidden","childcount":0,"type":"Field","name":"numberofHidden","token":"public int numberofHidden ","scope":"TraintheANN"},{"signature":"TraintheANN.numberofNperHidden","childcount":0,"type":"Field","name":"numberofNperHidden","token":"public int numberofNperHidden ","scope":"TraintheANN"},{"signature":"TraintheANN.learningRate","childcount":0,"type":"Field","name":"learningRate","token":"public double learningRate ","scope":"TraintheANN"},{"signature":"TraintheANN.ActivationFunction","childcount":0,"type":"Field","name":"ActivationFunction","token":"public int ActivationFunction ","scope":"TraintheANN"},{"signature":"TraintheANN.ActivationFunctionO","childcount":0,"type":"Field","name":"ActivationFunctionO","token":"public int ActivationFunctionO ","scope":"TraintheANN"},{"signature":"TraintheANN.usage","childcount":0,"type":"Field","name":"usage","token":"public string usage ","scope":"TraintheANN"},{"signature":"TraintheANN.path","childcount":0,"type":"Field","name":"path","token":"public string path ","scope":"TraintheANN"},{"signature":"TraintheANN.numberoftraining","childcount":0,"type":"Field","name":"numberoftraining","token":"public int numberoftraining ","scope":"TraintheANN"},{"signature":"TraintheANN.inputsandoutputs","childcount":0,"type":"Field","name":"inputsandoutputs","token":"public string inputsandoutputs ","scope":"TraintheANN"},{"signature":"TraintheANN.numberofdata","childcount":0,"type":"Field","name":"numberofdata","token":"public int numberofdata ","scope":"TraintheANN"},{"signature":"TraintheANN.LoadData","childcount":0,"type":"Field","name":"LoadData","token":"public bool LoadData ","scope":"TraintheANN"},{"signature":"TraintheANN.SaveData","childcount":0,"type":"Field","name":"SaveData","token":"public bool SaveData ","scope":"TraintheANN"},{"signature":"TraintheANN.SafeLoadData()","childcount":0,"type":"Method","name":"SafeLoadData","token":"public void SafeLoadData()","scope":"TraintheANN"},{"signature":"Training","childcount":2,"type":"Class","name":"Training","token":"[CustomEditor(typeof(TraintheANN))]\n[CanEditMultipleObjects]\npublic class Training : Editor ","scope":""},{"signature":"Training.ListLenght","childcount":0,"type":"Field","name":"ListLenght","token":"SerializedProperty ListLenght ","scope":"Training"},{"signature":"Training.OnInspectorGUI()","childcount":0,"type":"Method","name":"OnInspectorGUI","token":"public void OnInspectorGUI()","scope":"Training"},{"signature":"QuestUI","childcount":7,"type":"Namespace","name":"QuestUI","token":"namespace QuestUI","scope":"","comments":{"summary":"Namespace used to include all the script related to the QuestUI"}},{"signature":"QuestUI.Quest","childcount":10,"type":"Class","name":"Quest","token":"[CreateAssetMenu(fileName = \"Quest\", menuName = \"Quest\", order = 0)]\npublic class Quest : ScriptableObject ","scope":"QuestUI"},{"signature":"QuestUI.Quest.objectives","childcount":0,"type":"Field","name":"objectives","token":"[SerializeField]\nList<Objectives> objectives ","scope":"QuestUI.Quest","comments":{"summary":"The Objectives necessary to complete the quest"}},{"signature":"QuestUI.Quest.rewards","childcount":0,"type":"Field","name":"rewards","token":"[SerializeField]\nList<Rewards> rewards ","scope":"QuestUI.Quest","comments":{"summary":"the rewards given by completing the quest"}},{"signature":"QuestUI.Quest.Rewards","childcount":2,"type":"Class","name":"Rewards","token":"public class Rewards ","scope":"QuestUI.Quest"},{"signature":"QuestUI.Quest.Rewards.number","childcount":0,"type":"Field","name":"number","token":"[Min(1)]\npublic int number ","scope":"QuestUI.Quest.Rewards"},{"signature":"QuestUI.Quest.Rewards.item","childcount":0,"type":"Field","name":"item","token":"public string item ","scope":"QuestUI.Quest.Rewards"},{"signature":"QuestUI.Quest.Objectives","childcount":2,"type":"Class","name":"Objectives","token":"public class Objectives ","scope":"QuestUI.Quest"},{"signature":"QuestUI.Quest.Objectives.reference","childcount":0,"type":"Field","name":"reference","token":"public string reference ","scope":"QuestUI.Quest.Objectives"},{"signature":"QuestUI.Quest.Objectives.description","childcount":0,"type":"Field","name":"description","token":"public string description ","scope":"QuestUI.Quest.Objectives"},{"signature":"QuestUI.Quest.GetTitle()","childcount":0,"type":"Method","name":"GetTitle","token":"public string GetTitle()","scope":"QuestUI.Quest","comments":{"summary":"getter for the quest title"}},{"signature":"QuestUI.Quest.GetObjectiveCount()","childcount":0,"type":"Method","name":"GetObjectiveCount","token":"public int GetObjectiveCount()","scope":"QuestUI.Quest","comments":{"summary":"getter for the number of objectives"}},{"signature":"QuestUI.Quest.getObjectives()","childcount":0,"type":"Method","name":"getObjectives","token":"public IEnumerable<Objectives> getObjectives()","scope":"QuestUI.Quest","comments":{"summary":"return all the quest objectives"}},{"signature":"QuestUI.Quest.GetRewards()","childcount":0,"type":"Method","name":"GetRewards","token":"public IEnumerable<Rewards> GetRewards()","scope":"QuestUI.Quest","comments":{"summary":"return the quest rewards"}},{"signature":"QuestUI.Quest.HasObjective(string)","childcount":0,"type":"Method","name":"HasObjective","token":"internal bool HasObjective(string objectiveRef)","scope":"QuestUI.Quest","comments":{"summary":"checker used if the quest has a specific objective"},"params":{"objectiveRef":"string"}},{"signature":"QuestUI.Quest.GetByName(string)","childcount":0,"type":"Method","name":"GetByName","token":"public static Quest GetByName(string questName)","scope":"QuestUI.Quest","comments":{"summary":"used to find a quest by name"},"params":{"questName":"string"}},{"signature":"QuestUI.QuestCompletion","childcount":3,"type":"Class","name":"QuestCompletion","token":"public class QuestCompletion : MonoBehaviour ","scope":"QuestUI"},{"signature":"QuestUI.QuestCompletion.quest","childcount":0,"type":"Field","name":"quest","token":"[SerializeField]\nQuest quest ","scope":"QuestUI.QuestCompletion"},{"signature":"QuestUI.QuestCompletion.objective","childcount":0,"type":"Field","name":"objective","token":"[SerializeField]\nstring objective ","scope":"QuestUI.QuestCompletion"},{"signature":"QuestUI.QuestCompletion.CompleteObjective()","childcount":0,"type":"Method","name":"CompleteObjective","token":"public void CompleteObjective()","scope":"QuestUI.QuestCompletion"},{"signature":"QuestUI.QuestGiver","childcount":2,"type":"Class","name":"QuestGiver","token":"public class QuestGiver : MonoBehaviour ","scope":"QuestUI"},{"signature":"QuestUI.QuestGiver.quest","childcount":0,"type":"Field","name":"quest","token":"[SerializeField]\nQuest quest ","scope":"QuestUI.QuestGiver"},{"signature":"QuestUI.QuestGiver.GiveQuest()","childcount":0,"type":"Method","name":"GiveQuest","token":"public void GiveQuest()","scope":"QuestUI.QuestGiver"},{"signature":"QuestUI.QuestList","childcount":9,"type":"Class","name":"QuestList","token":"public class QuestList : MonoBehaviour, IpredicateEvaluator ","scope":"QuestUI"},{"signature":"QuestUI.QuestList.statuses","childcount":0,"type":"Field","name":"statuses","token":"static List<QuestStatus> statuses ","scope":"QuestUI.QuestList"},{"signature":"QuestUI.QuestList.onUpdate","childcount":0,"type":"Field","name":"onUpdate","token":"public event Action onUpdate ","scope":"QuestUI.QuestList"},{"signature":"QuestUI.QuestList.AddQuest(Quest)","childcount":0,"type":"Method","name":"AddQuest","token":"public void AddQuest(Quest quest)","scope":"QuestUI.QuestList","params":{"quest":"Quest"}},{"signature":"QuestUI.QuestList.CompleteObjective(Quest, string)","childcount":0,"type":"Method","name":"CompleteObjective","token":"public void CompleteObjective(Quest quest, string objective)","scope":"QuestUI.QuestList","params":{"quest":"Quest","objective":"string"}},{"signature":"QuestUI.QuestList.HasQuest(Quest)","childcount":0,"type":"Method","name":"HasQuest","token":"public bool HasQuest(Quest quest)","scope":"QuestUI.QuestList","params":{"quest":"Quest"}},{"signature":"QuestUI.QuestList.GetStatuses()","childcount":0,"type":"Method","name":"GetStatuses","token":"public IEnumerable<QuestStatus> GetStatuses()","scope":"QuestUI.QuestList"},{"signature":"QuestUI.QuestList.GetQuestStatus(Quest)","childcount":0,"type":"Method","name":"GetQuestStatus","token":"private QuestStatus GetQuestStatus(Quest quest)","scope":"QuestUI.QuestList","params":{"quest":"Quest"}},{"signature":"QuestUI.QuestList.GiveRewards(Quest)","childcount":0,"type":"Method","name":"GiveRewards","token":"private void GiveRewards(Quest quest)","scope":"QuestUI.QuestList","params":{"quest":"Quest"}},{"signature":"QuestUI.QuestList.Evaluate(string, string[])","childcount":0,"type":"Method","name":"Evaluate","token":"public bool? Evaluate(string predicate, string[] parameters)","scope":"QuestUI.QuestList","params":{"predicate":"string","parameters":"string[]"}},{"signature":"QuestUI.QuestStatus","childcount":8,"type":"Class","name":"QuestStatus","token":"public class QuestStatus ","scope":"QuestUI"},{"signature":"QuestUI.QuestStatus.quest","childcount":0,"type":"Field","name":"quest","token":"Quest quest ","scope":"QuestUI.QuestStatus"},{"signature":"QuestUI.QuestStatus.completedObjectives","childcount":0,"type":"Field","name":"completedObjectives","token":"static List<string> completedObjectives ","scope":"QuestUI.QuestStatus"},{"signature":"QuestUI.QuestStatus.QuestStatus(Quest)","childcount":0,"type":"Constructor","name":"QuestStatus","token":"public  QuestStatus(Quest quest)","scope":"QuestUI.QuestStatus","params":{"quest":"Quest"}},{"signature":"QuestUI.QuestStatus.isComplete()","childcount":0,"type":"Method","name":"isComplete","token":"public bool isComplete()","scope":"QuestUI.QuestStatus"},{"signature":"QuestUI.QuestStatus.GetQuest()","childcount":0,"type":"Method","name":"GetQuest","token":"public Quest GetQuest()","scope":"QuestUI.QuestStatus"},{"signature":"QuestUI.QuestStatus.GetCompletedCount()","childcount":0,"type":"Method","name":"GetCompletedCount","token":"public int GetCompletedCount()","scope":"QuestUI.QuestStatus"},{"signature":"QuestUI.QuestStatus.isObjectiveCompleted(string)","childcount":0,"type":"Method","name":"isObjectiveCompleted","token":"public bool isObjectiveCompleted(string objective)","scope":"QuestUI.QuestStatus","params":{"objective":"string"}},{"signature":"QuestUI.QuestStatus.CompleteObjective(string)","childcount":0,"type":"Method","name":"CompleteObjective","token":"public void CompleteObjective(string objective)","scope":"QuestUI.QuestStatus","params":{"objective":"string"}},{"signature":"QuestUI.QuestTooltip","childcount":2,"type":"Class","name":"QuestTooltip","token":"public class QuestTooltip : TooltipSpawner ","scope":"QuestUI"},{"signature":"QuestUI.QuestTooltip.CanCreateTooltip()","childcount":0,"type":"Method","name":"CanCreateTooltip","token":"public override bool CanCreateTooltip()","scope":"QuestUI.QuestTooltip"},{"signature":"QuestUI.QuestTooltip.UpdateTooltip(GameObject)","childcount":0,"type":"Method","name":"UpdateTooltip","token":"public override void UpdateTooltip(GameObject tooltip)","scope":"QuestUI.QuestTooltip","params":{"tooltip":"GameObject"}},{"signature":"QuestUI.QuestTooltipUI","childcount":7,"type":"Class","name":"QuestTooltipUI","token":"public class QuestTooltipUI : MonoBehaviour ","scope":"QuestUI"},{"signature":"QuestUI.QuestTooltipUI.title","childcount":0,"type":"Field","name":"title","token":"[SerializeField]\nTextMeshProUGUI title ","scope":"QuestUI.QuestTooltipUI"},{"signature":"QuestUI.QuestTooltipUI.objectiveContainer","childcount":0,"type":"Field","name":"objectiveContainer","token":"[SerializeField]\nTransform objectiveContainer ","scope":"QuestUI.QuestTooltipUI"},{"signature":"QuestUI.QuestTooltipUI.objectivePrefab","childcount":0,"type":"Field","name":"objectivePrefab","token":"[SerializeField]\nGameObject objectivePrefab ","scope":"QuestUI.QuestTooltipUI"},{"signature":"QuestUI.QuestTooltipUI.objectiveIncompletePrefab","childcount":0,"type":"Field","name":"objectiveIncompletePrefab","token":"[SerializeField]\nGameObject objectiveIncompletePrefab ","scope":"QuestUI.QuestTooltipUI"},{"signature":"QuestUI.QuestTooltipUI.rewardText","childcount":0,"type":"Field","name":"rewardText","token":"[SerializeField]\nTextMeshProUGUI rewardText ","scope":"QuestUI.QuestTooltipUI"},{"signature":"QuestUI.QuestTooltipUI.SetUp(QuestStatus)","childcount":0,"type":"Method","name":"SetUp","token":"public void SetUp(QuestStatus status)","scope":"QuestUI.QuestTooltipUI","params":{"status":"QuestStatus"}},{"signature":"QuestUI.QuestTooltipUI.GetRewardText(Quest)","childcount":0,"type":"Method","name":"GetRewardText","token":"private string GetRewardText(Quest quest)","scope":"QuestUI.QuestTooltipUI","params":{"quest":"Quest"}},{"signature":"QuestDummy","childcount":2,"type":"Class","name":"QuestDummy","token":"public class QuestDummy : MonoBehaviour ","scope":""},{"signature":"QuestDummy.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"QuestDummy"},{"signature":"QuestDummy.Update()","childcount":0,"type":"Method","name":"Update","token":"void Update()","scope":"QuestDummy"},{"signature":"QuestItemUI","childcount":5,"type":"Class","name":"QuestItemUI","token":"public class QuestItemUI : MonoBehaviour ","scope":""},{"signature":"QuestItemUI.title","childcount":0,"type":"Field","name":"title","token":"[SerializeField]\nTextMeshProUGUI title ","scope":"QuestItemUI"},{"signature":"QuestItemUI.progress","childcount":0,"type":"Field","name":"progress","token":"[SerializeField]\nTextMeshProUGUI progress ","scope":"QuestItemUI"},{"signature":"QuestItemUI.status","childcount":0,"type":"Field","name":"status","token":"QuestStatus status ","scope":"QuestItemUI"},{"signature":"QuestItemUI.SetUp(QuestStatus)","childcount":0,"type":"Method","name":"SetUp","token":"public void SetUp(QuestStatus status)","scope":"QuestItemUI","params":{"status":"QuestStatus"}},{"signature":"QuestItemUI.GetQuestStatus()","childcount":0,"type":"Method","name":"GetQuestStatus","token":"public QuestStatus GetQuestStatus()","scope":"QuestItemUI"},{"signature":"QuestListUI","childcount":4,"type":"Class","name":"QuestListUI","token":"public class QuestListUI : MonoBehaviour ","scope":""},{"signature":"QuestListUI.questPrefab","childcount":0,"type":"Field","name":"questPrefab","token":"[SerializeField]\nQuestItemUI questPrefab ","scope":"QuestListUI"},{"signature":"QuestListUI.questList","childcount":0,"type":"Field","name":"questList","token":"QuestList questList ","scope":"QuestListUI"},{"signature":"QuestListUI.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"QuestListUI"},{"signature":"QuestListUI.Redraw()","childcount":0,"type":"Method","name":"Redraw","token":"private void Redraw()","scope":"QuestListUI"},{"signature":"ShowHideQuests","childcount":3,"type":"Class","name":"ShowHideQuests","token":"public class ShowHideQuests : MonoBehaviour ","scope":""},{"signature":"ShowHideQuests.QuestList","childcount":0,"type":"Field","name":"QuestList","token":"[SerializeField]\nGameObject QuestList ","scope":"ShowHideQuests"},{"signature":"ShowHideQuests.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"ShowHideQuests"},{"signature":"ShowHideQuests.ChangeQuestStatus()","childcount":0,"type":"Method","name":"ChangeQuestStatus","token":"public void ChangeQuestStatus()","scope":"ShowHideQuests"},{"signature":"UI.Tooltips","childcount":1,"type":"Namespace","name":"UI.Tooltips","token":"namespace UI.Tooltips","scope":""},{"signature":"UI.Tooltips.TooltipSpawner","childcount":11,"type":"Class","name":"TooltipSpawner","token":"public abstract class TooltipSpawner : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler ","scope":"UI.Tooltips","comments":{"summary":"Abstract base class that handles the spawning of a tooltip prefab at the\r\n     correct position on screen relative to a cursor.\r\n     \r\n     Override the abstract functions to create a tooltip spawner for your own\r\n     data."}},{"signature":"UI.Tooltips.TooltipSpawner.tooltipPrefab","childcount":0,"type":"Field","name":"tooltipPrefab","token":"[Tooltip(\"The prefab of the tooltip to spawn.\")]\n[SerializeField]\nGameObject tooltipPrefab ","scope":"UI.Tooltips.TooltipSpawner"},{"signature":"UI.Tooltips.TooltipSpawner.tooltip","childcount":0,"type":"Field","name":"tooltip","token":"GameObject tooltip ","scope":"UI.Tooltips.TooltipSpawner"},{"signature":"UI.Tooltips.TooltipSpawner.UpdateTooltip(GameObject)","childcount":0,"type":"Method","name":"UpdateTooltip","token":"public abstract void UpdateTooltip(GameObject tooltip)","scope":"UI.Tooltips.TooltipSpawner","comments":{"summary":"Called when it is time to update the information on the tooltip\r\n         prefab.","param-tooltip":"The spawned tooltip prefab for updating."},"params":{"tooltip":"GameObject"}},{"signature":"UI.Tooltips.TooltipSpawner.CanCreateTooltip()","childcount":0,"type":"Method","name":"CanCreateTooltip","token":"public abstract bool CanCreateTooltip()","scope":"UI.Tooltips.TooltipSpawner","comments":{"summary":"Return true when the tooltip spawner should be allowed to create a tooltip."}},{"signature":"UI.Tooltips.TooltipSpawner.OnDestroy()","childcount":0,"type":"Method","name":"OnDestroy","token":"private void OnDestroy()","scope":"UI.Tooltips.TooltipSpawner"},{"signature":"UI.Tooltips.TooltipSpawner.OnDisable()","childcount":0,"type":"Method","name":"OnDisable","token":"private void OnDisable()","scope":"UI.Tooltips.TooltipSpawner"},{"signature":"UI.Tooltips.TooltipSpawner.IPointerEnterHandler.OnPointerEnter(PointerEventData)","childcount":0,"type":"Method","name":"IPointerEnterHandler.OnPointerEnter","token":"void IPointerEnterHandler.OnPointerEnter(PointerEventData eventData)","scope":"UI.Tooltips.TooltipSpawner","params":{"eventData":"PointerEventData"}},{"signature":"UI.Tooltips.TooltipSpawner.PositionTooltip()","childcount":0,"type":"Method","name":"PositionTooltip","token":"private void PositionTooltip()","scope":"UI.Tooltips.TooltipSpawner"},{"signature":"UI.Tooltips.TooltipSpawner.GetCornerIndex(bool, bool)","childcount":0,"type":"Method","name":"GetCornerIndex","token":"private int GetCornerIndex(bool below, bool right)","scope":"UI.Tooltips.TooltipSpawner","params":{"below":"bool","right":"bool"}},{"signature":"UI.Tooltips.TooltipSpawner.IPointerExitHandler.OnPointerExit(PointerEventData)","childcount":0,"type":"Method","name":"IPointerExitHandler.OnPointerExit","token":"void IPointerExitHandler.OnPointerExit(PointerEventData eventData)","scope":"UI.Tooltips.TooltipSpawner","params":{"eventData":"PointerEventData"}},{"signature":"UI.Tooltips.TooltipSpawner.ClearTooltip()","childcount":0,"type":"Method","name":"ClearTooltip","token":"private void ClearTooltip()","scope":"UI.Tooltips.TooltipSpawner"},{"signature":"Block","childcount":14,"type":"Class","name":"Block","token":"public class Block ","scope":""},{"signature":"Block.Cubeside","childcount":6,"type":"Enum","name":"Cubeside","token":"enum Cubeside ","scope":"Block"},{"signature":"Block.Cubeside.BOTTOM","childcount":0,"type":"EnumValue","name":"BOTTOM","token":"BOTTOM","scope":"Block.Cubeside"},{"signature":"Block.Cubeside.TOP","childcount":0,"type":"EnumValue","name":"TOP","token":"TOP","scope":"Block.Cubeside"},{"signature":"Block.Cubeside.LEFT","childcount":0,"type":"EnumValue","name":"LEFT","token":"LEFT","scope":"Block.Cubeside"},{"signature":"Block.Cubeside.RIGHT","childcount":0,"type":"EnumValue","name":"RIGHT","token":"RIGHT","scope":"Block.Cubeside"},{"signature":"Block.Cubeside.FRONT","childcount":0,"type":"EnumValue","name":"FRONT","token":"FRONT","scope":"Block.Cubeside"},{"signature":"Block.Cubeside.BACK","childcount":0,"type":"EnumValue","name":"BACK","token":"BACK","scope":"Block.Cubeside"},{"signature":"Block.BlockType","childcount":5,"type":"Enum","name":"BlockType","token":"public enum BlockType ","scope":"Block"},{"signature":"Block.BlockType.GRASS","childcount":0,"type":"EnumValue","name":"GRASS","token":"GRASS","scope":"Block.BlockType"},{"signature":"Block.BlockType.DIRT","childcount":0,"type":"EnumValue","name":"DIRT","token":"DIRT","scope":"Block.BlockType"},{"signature":"Block.BlockType.STONE","childcount":0,"type":"EnumValue","name":"STONE","token":"STONE","scope":"Block.BlockType"},{"signature":"Block.BlockType.WATER","childcount":0,"type":"EnumValue","name":"WATER","token":"WATER","scope":"Block.BlockType"},{"signature":"Block.BlockType.AIR","childcount":0,"type":"EnumValue","name":"AIR","token":"AIR","scope":"Block.BlockType"},{"signature":"Block.bType","childcount":0,"type":"Field","name":"bType","token":"public BlockType bType ","scope":"Block"},{"signature":"Block.isSolid","childcount":0,"type":"Field","name":"isSolid","token":"public bool isSolid ","scope":"Block"},{"signature":"Block.owner","childcount":0,"type":"Field","name":"owner","token":"Chunk owner ","scope":"Block"},{"signature":"Block.parent","childcount":0,"type":"Field","name":"parent","token":"GameObject parent ","scope":"Block"},{"signature":"Block.position","childcount":0,"type":"Field","name":"position","token":"Vector3 position ","scope":"Block"},{"signature":"Block.blockUVs","childcount":0,"type":"Field","name":"blockUVs","token":"Vector2[,] blockUVs ","scope":"Block"},{"signature":"Block.Block(BlockType, Vector3, GameObject, Chunk)","childcount":0,"type":"Constructor","name":"Block","token":"public  Block(BlockType b, Vector3 pos, GameObject p, Chunk o)","scope":"Block","params":{"b":"BlockType","pos":"Vector3","p":"GameObject","o":"Chunk"}},{"signature":"Block.CreateQuad(Cubeside)","childcount":0,"type":"Method","name":"CreateQuad","token":"void CreateQuad(Cubeside side)","scope":"Block","params":{"side":"Cubeside"}},{"signature":"Block.ConvertBlockIndexToLocal(int)","childcount":0,"type":"Method","name":"ConvertBlockIndexToLocal","token":"int ConvertBlockIndexToLocal(int i)","scope":"Block","params":{"i":"int"}},{"signature":"Block.GetBlock(int, int, int)","childcount":0,"type":"Method","name":"GetBlock","token":"public Block GetBlock(int x, int y, int z)","scope":"Block","params":{"x":"int","y":"int","z":"int"}},{"signature":"Block.HasSolidNeighbour(int, int, int)","childcount":0,"type":"Method","name":"HasSolidNeighbour","token":"public bool HasSolidNeighbour(int x, int y, int z)","scope":"Block","params":{"x":"int","y":"int","z":"int"}},{"signature":"Block.Draw()","childcount":0,"type":"Method","name":"Draw","token":"public void Draw()","scope":"Block"},{"signature":"Chunk","childcount":8,"type":"Class","name":"Chunk","token":"public class Chunk ","scope":""},{"signature":"Chunk.cubeMaterial","childcount":0,"type":"Field","name":"cubeMaterial","token":"public Material cubeMaterial ","scope":"Chunk"},{"signature":"Chunk.fluidMaterial","childcount":0,"type":"Field","name":"fluidMaterial","token":"public Material fluidMaterial ","scope":"Chunk"},{"signature":"Chunk.chunk","childcount":0,"type":"Field","name":"chunk","token":"public GameObject chunk ","scope":"Chunk"},{"signature":"Chunk.fluid","childcount":0,"type":"Field","name":"fluid","token":"public GameObject fluid ","scope":"Chunk"},{"signature":"Chunk.BuildChunk()","childcount":0,"type":"Method","name":"BuildChunk","token":"void BuildChunk()","scope":"Chunk"},{"signature":"Chunk.DrawChunk()","childcount":0,"type":"Method","name":"DrawChunk","token":"public void DrawChunk()","scope":"Chunk"},{"signature":"Chunk.Chunk(Vector3, Material, Material)","childcount":0,"type":"Constructor","name":"Chunk","token":"public  Chunk(Vector3 position, Material c, Material t)","scope":"Chunk","params":{"position":"Vector3","c":"Material","t":"Material"}},{"signature":"Chunk.CombineQuads(GameObject, Material)","childcount":0,"type":"Method","name":"CombineQuads","token":"void CombineQuads(GameObject o, Material m)","scope":"Chunk","params":{"o":"GameObject","m":"Material"}},{"signature":"GetTexturedata","childcount":8,"type":"Class","name":"GetTexturedata","token":"public class GetTexturedata : MonoBehaviour ","scope":""},{"signature":"GetTexturedata.GrassTop","childcount":0,"type":"Field","name":"GrassTop","token":"public Sprite GrassTop ","scope":"GetTexturedata"},{"signature":"GetTexturedata.StringName","childcount":0,"type":"Field","name":"StringName","token":"public string StringName ","scope":"GetTexturedata"},{"signature":"GetTexturedata.GrassTopVectors","childcount":0,"type":"Field","name":"GrassTopVectors","token":"private string GrassTopVectors ","scope":"GetTexturedata"},{"signature":"GetTexturedata.index","childcount":0,"type":"Field","name":"index","token":"int index ","scope":"GetTexturedata"},{"signature":"GetTexturedata.CreateFile(string)","childcount":0,"type":"Method","name":"CreateFile","token":"void CreateFile(string result)","scope":"GetTexturedata","params":{"result":"string"}},{"signature":"GetTexturedata.GetUVSizes()","childcount":0,"type":"Method","name":"GetUVSizes","token":"string GetUVSizes()","scope":"GetTexturedata"},{"signature":"GetTexturedata.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"GetTexturedata"},{"signature":"GetTexturedata.Update()","childcount":0,"type":"Method","name":"Update","token":"void Update()","scope":"GetTexturedata"},{"signature":"MoveBetweenWorlds","childcount":14,"type":"Class","name":"MoveBetweenWorlds","token":"public class MoveBetweenWorlds : MonoBehaviour ","scope":""},{"signature":"MoveBetweenWorlds.NextArea","childcount":0,"type":"Field","name":"NextArea","token":"[SerializeField]\nGameObject NextArea ","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.ThisArea","childcount":0,"type":"Field","name":"ThisArea","token":"[SerializeField]\nGameObject ThisArea ","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.PreviousArea","childcount":0,"type":"Field","name":"PreviousArea","token":"[SerializeField]\nGameObject PreviousArea ","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.Movebutton","childcount":0,"type":"Field","name":"Movebutton","token":"[SerializeField]\nGameObject[] Movebutton ","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.nextAreaUnlocked","childcount":0,"type":"Field","name":"nextAreaUnlocked","token":"[SerializeField]\nstatic bool nextAreaUnlocked ","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.NextAreaSceneN","childcount":0,"type":"Field","name":"NextAreaSceneN","token":"[SerializeField]\nint NextAreaSceneN ","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.PreviousAreaSceneN","childcount":0,"type":"Field","name":"PreviousAreaSceneN","token":"[SerializeField]\nint PreviousAreaSceneN ","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.MoveTo","childcount":0,"type":"Field","name":"MoveTo","token":"int MoveTo ","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.SetAreaUnlock()","childcount":0,"type":"Method","name":"SetAreaUnlock","token":"public void SetAreaUnlock()","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.MoveToNextArea()","childcount":0,"type":"Method","name":"MoveToNextArea","token":"public void MoveToNextArea()","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.MoveToPreviousArea()","childcount":0,"type":"Method","name":"MoveToPreviousArea","token":"public void MoveToPreviousArea()","scope":"MoveBetweenWorlds"},{"signature":"MoveBetweenWorlds.NextWorld(int)","childcount":0,"type":"Method","name":"NextWorld","token":"public void NextWorld(int next)","scope":"MoveBetweenWorlds","params":{"next":"int"}},{"signature":"MoveBetweenWorlds.ChangeScene()","childcount":0,"type":"Method","name":"ChangeScene","token":"public void ChangeScene()","scope":"MoveBetweenWorlds"},{"signature":"TheTide.utils","childcount":2,"type":"Namespace","name":"TheTide.utils","token":"namespace TheTide.utils","scope":""},{"signature":"TheTide.utils.SerializeMesh","childcount":8,"type":"Class","name":"SerializeMesh","token":"[ExecuteInEditMode]\n[RequireComponent(typeof(MeshFilter))]\npublic class SerializeMesh : MonoBehaviour ","scope":"TheTide.utils"},{"signature":"TheTide.utils.SerializeMesh.uv","childcount":0,"type":"Field","name":"uv","token":"[HideInInspector]\n[SerializeField]\nVector2[] uv ","scope":"TheTide.utils.SerializeMesh"},{"signature":"TheTide.utils.SerializeMesh.verticies","childcount":0,"type":"Field","name":"verticies","token":"[HideInInspector]\n[SerializeField]\nVector3[] verticies ","scope":"TheTide.utils.SerializeMesh"},{"signature":"TheTide.utils.SerializeMesh.triangles","childcount":0,"type":"Field","name":"triangles","token":"[HideInInspector]\n[SerializeField]\nint[] triangles ","scope":"TheTide.utils.SerializeMesh"},{"signature":"TheTide.utils.SerializeMesh.serialized","childcount":0,"type":"Field","name":"serialized","token":"[HideInInspector]\n[SerializeField]\nbool serialized ","scope":"TheTide.utils.SerializeMesh"},{"signature":"TheTide.utils.SerializeMesh.Awake()","childcount":0,"type":"Method","name":"Awake","token":"void Awake()","scope":"TheTide.utils.SerializeMesh"},{"signature":"TheTide.utils.SerializeMesh.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"TheTide.utils.SerializeMesh"},{"signature":"TheTide.utils.SerializeMesh.Serialize()","childcount":0,"type":"Method","name":"Serialize","token":"public void Serialize()","scope":"TheTide.utils.SerializeMesh"},{"signature":"TheTide.utils.SerializeMesh.Rebuild()","childcount":0,"type":"Method","name":"Rebuild","token":"public Mesh Rebuild()","scope":"TheTide.utils.SerializeMesh"},{"signature":"TheTide.utils.SerializeMeshEditor","childcount":3,"type":"Class","name":"SerializeMeshEditor","token":"[CustomEditor(typeof(SerializeMesh))]\nclass SerializeMeshEditor : Editor ","scope":"TheTide.utils"},{"signature":"TheTide.utils.SerializeMeshEditor.obj","childcount":0,"type":"Field","name":"obj","token":"SerializeMesh obj ","scope":"TheTide.utils.SerializeMeshEditor"},{"signature":"TheTide.utils.SerializeMeshEditor.OnSceneGUI()","childcount":0,"type":"Method","name":"OnSceneGUI","token":"void OnSceneGUI()","scope":"TheTide.utils.SerializeMeshEditor"},{"signature":"TheTide.utils.SerializeMeshEditor.OnInspectorGUI()","childcount":0,"type":"Method","name":"OnInspectorGUI","token":"public override void OnInspectorGUI()","scope":"TheTide.utils.SerializeMeshEditor"},{"signature":"Utils","childcount":9,"type":"Class","name":"Utils","token":"public class Utils ","scope":""},{"signature":"Utils.maxHeight","childcount":0,"type":"Field","name":"maxHeight","token":"static int maxHeight ","scope":"Utils"},{"signature":"Utils.smooth","childcount":0,"type":"Field","name":"smooth","token":"static float smooth ","scope":"Utils"},{"signature":"Utils.octaves","childcount":0,"type":"Field","name":"octaves","token":"static int octaves ","scope":"Utils"},{"signature":"Utils.persistence","childcount":0,"type":"Field","name":"persistence","token":"static float persistence ","scope":"Utils"},{"signature":"Utils.GenerateStoneHeight(float, float)","childcount":0,"type":"Method","name":"GenerateStoneHeight","token":"public static int GenerateStoneHeight(float x, float z)","scope":"Utils","params":{"x":"float","z":"float"}},{"signature":"Utils.GenerateHeight(float, float)","childcount":0,"type":"Method","name":"GenerateHeight","token":"public static int GenerateHeight(float x, float z)","scope":"Utils","params":{"x":"float","z":"float"}},{"signature":"Utils.fBM3D(float, float, float, float, int)","childcount":0,"type":"Method","name":"fBM3D","token":"public static float fBM3D(float x, float y, float z, float sm, int oct)","scope":"Utils","params":{"x":"float","y":"float","z":"float","sm":"float","oct":"int"}},{"signature":"Utils.Map(float, float, float, float, float)","childcount":0,"type":"Method","name":"Map","token":"static float Map(float newmin, float newmax, float origmin, float origmax, float value)","scope":"Utils","params":{"newmin":"float","newmax":"float","origmin":"float","origmax":"float","value":"float"}},{"signature":"Utils.fBM(float, float, int, float)","childcount":0,"type":"Method","name":"fBM","token":"static float fBM(float x, float z, int oct, float pers)","scope":"Utils","params":{"x":"float","z":"float","oct":"int","pers":"float"}},{"signature":"World","childcount":10,"type":"Class","name":"World","token":"public class World : MonoBehaviour ","scope":""},{"signature":"World.textureAtlas","childcount":0,"type":"Field","name":"textureAtlas","token":"public Material textureAtlas ","scope":"World"},{"signature":"World.fluidTexture","childcount":0,"type":"Field","name":"fluidTexture","token":"public Material fluidTexture ","scope":"World"},{"signature":"World.columnHeight","childcount":0,"type":"Field","name":"columnHeight","token":"public static int columnHeight ","scope":"World"},{"signature":"World.chunkSize","childcount":0,"type":"Field","name":"chunkSize","token":"public static int chunkSize ","scope":"World"},{"signature":"World.worldSize","childcount":0,"type":"Field","name":"worldSize","token":"public static int worldSize ","scope":"World"},{"signature":"World.chunks","childcount":0,"type":"Field","name":"chunks","token":"public static Dictionary<string, Chunk> chunks ","scope":"World"},{"signature":"World.BuildChunkName(Vector3)","childcount":0,"type":"Method","name":"BuildChunkName","token":"public static string BuildChunkName(Vector3 v)","scope":"World","params":{"v":"Vector3"}},{"signature":"World.BuildChunkColumn()","childcount":0,"type":"Method","name":"BuildChunkColumn","token":"IEnumerator BuildChunkColumn()","scope":"World"},{"signature":"World.BuildWorld()","childcount":0,"type":"Method","name":"BuildWorld","token":"IEnumerator BuildWorld()","scope":"World"},{"signature":"World.Start()","childcount":0,"type":"Method","name":"Start","token":"void Start()","scope":"World"},{"signature":"TutorialManager","childcount":6,"type":"Class","name":"TutorialManager","token":"public class TutorialManager : MonoBehaviour ","scope":""},{"signature":"TutorialManager.cv","childcount":0,"type":"Field","name":"cv","token":"CommonVariables cv ","scope":"TutorialManager"},{"signature":"TutorialManager.Departures","childcount":0,"type":"Field","name":"Departures","token":"[SerializeField]\nTextMesh Departures ","scope":"TutorialManager"},{"signature":"TutorialManager.isArrival","childcount":0,"type":"Field","name":"isArrival","token":"[SerializeField]\nbool isArrival ","scope":"TutorialManager"},{"signature":"TutorialManager.SetTranslation(bool)","childcount":0,"type":"Method","name":"SetTranslation","token":"public void SetTranslation(bool state)","scope":"TutorialManager","params":{"state":"bool"}},{"signature":"TutorialManager.NextScene()","childcount":0,"type":"Method","name":"NextScene","token":"public void NextScene()","scope":"TutorialManager"},{"signature":"TutorialManager.Start()","childcount":0,"type":"Method","name":"Start","token":"private void Start()","scope":"TutorialManager"}
];
const ROOT_MEMBERS = [
{"signature":"CommonVariables","childcount":23,"type":"Class","name":"CommonVariables","token":"public class CommonVariables ","scope":"","comments":{"summary":"class used to keep track all the static variables needed for the game"}},{"signature":"ComputerInputs","childcount":3,"type":"Class","name":"ComputerInputs","token":"public class ComputerInputs : MonoBehaviour ","scope":"","comments":{"summary":"Class used to interact with the NPC"}},{"signature":"Core","childcount":2,"type":"Namespace","name":"Core","token":"namespace Core","scope":""},{"signature":"Exit","childcount":1,"type":"Class","name":"Exit","token":"public class Exit : MonoBehaviour ","scope":"","comments":{"summary":"used to exit the game"}},{"signature":"MobilePhoneImputs","childcount":2,"type":"Class","name":"MobilePhoneImputs","token":"public class MobilePhoneImputs : MonoBehaviour ","scope":""},{"signature":"NPCHasStillDialogue","childcount":3,"type":"Class","name":"NPCHasStillDialogue","token":"public class NPCHasStillDialogue : MonoBehaviour ","scope":"","comments":{"summary":"this class is used to detect if the player has still something to say to the player"}},{"signature":"SetPlayer","childcount":4,"type":"Class","name":"SetPlayer","token":"public class SetPlayer : MonoBehaviour ","scope":"","comments":{"summary":"Class used to display the player avatar model"}},{"signature":"SetScreenResolution","childcount":1,"type":"Class","name":"SetScreenResolution","token":"public class SetScreenResolution : MonoBehaviour ","scope":"","comments":{"summary":"This class is used to set the resolution of the game as requested to ensure the UI works as expected"}},{"signature":"UKITAchanges","childcount":4,"type":"Class","name":"UKITAchanges","token":"public class UKITAchanges : MonoBehaviour ","scope":"","comments":{"summary":"Class used to modify if needed the gameobjects that should only appear in England/Italy"}},{"signature":"Wallet","childcount":7,"type":"Class","name":"Wallet","token":"public class Wallet : MonoBehaviour, IpredicateEvaluator ","scope":"","comments":{"summary":"Class used to keep track of the player coins"}},{"signature":"Dialogue","childcount":5,"type":"Namespace","name":"Dialogue","token":"namespace Dialogue","scope":"","comments":{"summary":"Namespace used for all the dialogue scripts"}},{"signature":"UI","childcount":1,"type":"Namespace","name":"UI","token":"namespace UI","scope":"","comments":{"summary":"namespace used to include all the Dialogue Ui scripts"}},{"signature":"VoiceActing","childcount":8,"type":"Class","name":"VoiceActing","token":"public class VoiceActing : MonoBehaviour ","scope":"","comments":{"summary":"Used to take track of the voice acting for the characters"}},{"signature":"Dialogue.Editor","childcount":2,"type":"Namespace","name":"Dialogue.Editor","token":"namespace Dialogue.Editor","scope":"","comments":{"summary":"namespace used for the dialogue editors classes"}},{"signature":"HotelManager","childcount":13,"type":"Class","name":"HotelManager","token":"public class HotelManager : MonoBehaviour ","scope":"","comments":{"summary":"this script is used as a manager for the Hotel scene"}},{"signature":"CarWheel","childcount":3,"type":"Class","name":"CarWheel","token":"public class CarWheel : MonoBehaviour ","scope":"","comments":{"summary":"function used to animate the car wheels in the loading screen"}},{"signature":"LoadingScreenManager","childcount":4,"type":"Class","name":"LoadingScreenManager","token":"public class LoadingScreenManager : MonoBehaviour ","scope":""},{"signature":"DayAndNight","childcount":1,"type":"Class","name":"DayAndNight","token":"public class DayAndNight ","scope":"","comments":{"summary":"class used to keep track of the device clock time"}},{"signature":"DecideGender","childcount":3,"type":"Class","name":"DecideGender","token":"public class DecideGender : MonoBehaviour ","scope":"","comments":{"summary":"class used to define the player gender"}},{"signature":"MenuGetTime","childcount":2,"type":"Class","name":"MenuGetTime","token":"public class MenuGetTime : MonoBehaviour ","scope":"","comments":{"summary":"class used to change the lighting in the menu in regards of the hour"}},{"signature":"MenuManager","childcount":12,"type":"Class","name":"MenuManager","token":"public class MenuManager : MonoBehaviour ","scope":"","comments":{"summary":"the main menu manager class"}},{"signature":"Brain","childcount":11,"type":"Class","name":"Brain","token":"public class Brain : MonoBehaviour ","scope":"","comments":{"summary":"This class is used to call and interact with the ANN"}},{"signature":"QuestionsAndAnswers","childcount":18,"type":"Class","name":"QuestionsAndAnswers","token":"public class QuestionsAndAnswers : MonoBehaviour ","scope":""},{"signature":"SaveandLoadWeights","childcount":2,"type":"Class","name":"SaveandLoadWeights","token":"public class SaveandLoadWeights ","scope":""},{"signature":"TraintheANN","childcount":16,"type":"Class","name":"TraintheANN","token":"public class TraintheANN : MonoBehaviour ","scope":""},{"signature":"Training","childcount":2,"type":"Class","name":"Training","token":"[CustomEditor(typeof(TraintheANN))]\n[CanEditMultipleObjects]\npublic class Training : Editor ","scope":""},{"signature":"QuestUI","childcount":7,"type":"Namespace","name":"QuestUI","token":"namespace QuestUI","scope":"","comments":{"summary":"Namespace used to include all the script related to the QuestUI"}},{"signature":"QuestDummy","childcount":2,"type":"Class","name":"QuestDummy","token":"public class QuestDummy : MonoBehaviour ","scope":""},{"signature":"QuestItemUI","childcount":5,"type":"Class","name":"QuestItemUI","token":"public class QuestItemUI : MonoBehaviour ","scope":""},{"signature":"QuestListUI","childcount":4,"type":"Class","name":"QuestListUI","token":"public class QuestListUI : MonoBehaviour ","scope":""},{"signature":"ShowHideQuests","childcount":3,"type":"Class","name":"ShowHideQuests","token":"public class ShowHideQuests : MonoBehaviour ","scope":""},{"signature":"UI.Tooltips","childcount":1,"type":"Namespace","name":"UI.Tooltips","token":"namespace UI.Tooltips","scope":""},{"signature":"Block","childcount":14,"type":"Class","name":"Block","token":"public class Block ","scope":""},{"signature":"Chunk","childcount":8,"type":"Class","name":"Chunk","token":"public class Chunk ","scope":""},{"signature":"GetTexturedata","childcount":8,"type":"Class","name":"GetTexturedata","token":"public class GetTexturedata : MonoBehaviour ","scope":""},{"signature":"MoveBetweenWorlds","childcount":14,"type":"Class","name":"MoveBetweenWorlds","token":"public class MoveBetweenWorlds : MonoBehaviour ","scope":""},{"signature":"TheTide.utils","childcount":2,"type":"Namespace","name":"TheTide.utils","token":"namespace TheTide.utils","scope":""},{"signature":"Utils","childcount":9,"type":"Class","name":"Utils","token":"public class Utils ","scope":""},{"signature":"World","childcount":10,"type":"Class","name":"World","token":"public class World : MonoBehaviour ","scope":""},{"signature":"TutorialManager","childcount":6,"type":"Class","name":"TutorialManager","token":"public class TutorialManager : MonoBehaviour ","scope":""}
];
const BUILTIN_WORDS_REGEX = /\b(?:__arglist|abstract|as|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|Dictionary|do|double|dynamic|else|enum|event|Exception|extern|false|final|finally|fixed|float|for|foreach|from|from|get|get;|goto|grouby|HashSet|if|in|in|int|interface|internal|is|List|lock|long|nameof|namespace|new|null|object|out|params|partial|private|protected|public|readonly|ref|return|sealed|select|select|set|set;|short|Single|Single32|Single64|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|UInt16|UInt32|UInt64|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|where|where|while)\b/g;
